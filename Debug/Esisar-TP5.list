
Esisar-TP5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006480  08006480  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006488  08006488  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006488  08006488  00016488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  20000014  080064a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba0  080064a4  00021ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa2f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb9  00000000  00000000  0003aa73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  0003f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e93  00000000  00000000  00040658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010906  00000000  00000000  000444eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a2b4  00000000  00000000  00054df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000ef120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063ec 	.word	0x080063ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080063ec 	.word	0x080063ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x54>)
 80004fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <HAL_MspInit+0x54>)
 8000500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000504:	6453      	str	r3, [r2, #68]	; 0x44
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x54>)
 8000508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_MspInit+0x54>)
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_MspInit+0x54>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	6413      	str	r3, [r2, #64]	; 0x40
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_MspInit+0x54>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	210f      	movs	r1, #15
 8000532:	f06f 0001 	mvn.w	r0, #1
 8000536:	f000 fb24 	bl	8000b82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <HAL_I2C_MspInit+0x84>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d12c      	bne.n	80005c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000586:	f44f 7310 	mov.w	r3, #576	; 0x240
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058c:	2312      	movs	r3, #18
 800058e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000598:	2304      	movs	r3, #4
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <HAL_I2C_MspInit+0x8c>)
 80005a4:	f000 fb24 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 80005b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_I2C_MspInit+0x88>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	; 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40005400 	.word	0x40005400
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020400 	.word	0x40020400

080005d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <HAL_SPI_MspInit+0x84>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d12b      	bne.n	8000652 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_SPI_MspInit+0x88>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_SPI_MspInit+0x88>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_SPI_MspInit+0x88>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_SPI_MspInit+0x88>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_SPI_MspInit+0x88>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_SPI_MspInit+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000632:	23e0      	movs	r3, #224	; 0xe0
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000642:	2305      	movs	r3, #5
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <HAL_SPI_MspInit+0x8c>)
 800064e:	f000 facf 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40013000 	.word	0x40013000
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000

08000668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_TIM_Base_MspInit+0x48>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d115      	bne.n	80006a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_TIM_Base_MspInit+0x4c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <HAL_TIM_Base_MspInit+0x4c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_TIM_Base_MspInit+0x4c>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	210c      	movs	r1, #12
 800069a:	201d      	movs	r0, #29
 800069c:	f000 fa71 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006a0:	201d      	movs	r0, #29
 80006a2:	f000 fa8a 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40000400 	.word	0x40000400
 80006b4:	40023800 	.word	0x40023800

080006b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_TIM_MspPostInit+0x68>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d11d      	bne.n	8000716 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_TIM_MspPostInit+0x6c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <HAL_TIM_MspPostInit+0x6c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_TIM_MspPostInit+0x6c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_TIM_MspPostInit+0x70>)
 8000712:	f000 fa6d 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40000400 	.word	0x40000400
 8000724:	40023800 	.word	0x40023800
 8000728:	40020800 	.word	0x40020800

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_UART_MspInit+0xc0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d14a      	bne.n	80007e4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_UART_MspInit+0xc4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b4:	2307      	movs	r3, #7
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <HAL_UART_MspInit+0xc8>)
 80007c0:	f000 fa16 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d4:	2307      	movs	r3, #7
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <HAL_UART_MspInit+0xcc>)
 80007e0:	f000 fa06 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40011000 	.word	0x40011000
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f8aa 	bl	800098c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000838:	f004 f93c 	bl	8004ab4 <xTaskGetSchedulerState>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d001      	beq.n	8000846 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000842:	f004 ffd9 	bl	80057f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}

0800084a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800084e:	2002      	movs	r0, #2
 8000850:	f000 fb84 	bl	8000f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fb7d 	bl	8000f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM3_IRQHandler+0x10>)
 800086e:	f001 f9a9 	bl	8001bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001abc 	.word	0x20001abc

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <SystemInit+0x60>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <SystemInit+0x60>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <SystemInit+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <SystemInit+0x64>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <SystemInit+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <SystemInit+0x64>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <SystemInit+0x64>)
 80008a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <SystemInit+0x64>)
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <SystemInit+0x68>)
 80008b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <SystemInit+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <SystemInit+0x64>)
 80008be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SystemInit+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SystemInit+0x60>)
 80008cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d0:	609a      	str	r2, [r3, #8]
#endif
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	40023800 	.word	0x40023800
 80008e4:	24003010 	.word	0x24003010

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f92b 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fde8 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f943 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000968:	f000 f90b 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20001a18 	.word	0x20001a18

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20001a18 	.word	0x20001a18

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff29 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff3e 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff31 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e159      	b.n	8000ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 8148 	bne.w	8000eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x4a>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d123      	bne.n	8000c82 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	69b9      	ldr	r1, [r7, #24]
 8000c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0203 	and.w	r2, r3, #3
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_GPIO_Init+0xe6>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d007      	beq.n	8000cd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cca:	2b11      	cmp	r3, #17
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b12      	cmp	r3, #18
 8000cd4:	d130      	bne.n	8000d38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80a2 	beq.w	8000eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b56      	ldr	r3, [pc, #344]	; (8000ed4 <HAL_GPIO_Init+0x2e4>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <HAL_GPIO_Init+0x2e4>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <HAL_GPIO_Init+0x2e4>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d92:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x2e8>)
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2ec>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x202>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x1fe>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <HAL_GPIO_Init+0x2f4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x1fa>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_GPIO_Init+0x2f8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x1f6>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a44      	ldr	r2, [pc, #272]	; (8000eec <HAL_GPIO_Init+0x2fc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x1f2>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e008      	b.n	8000df4 <HAL_GPIO_Init+0x204>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x204>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x204>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x204>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x204>
 8000df2:	2300      	movs	r3, #0
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	f002 0203 	and.w	r2, r2, #3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e04:	4934      	ldr	r1, [pc, #208]	; (8000ed8 <HAL_GPIO_Init+0x2e8>)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e36:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x300>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	f67f aea2 	bls.w	8000c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3724      	adds	r7, #36	; 0x24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40013800 	.word	0x40013800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40013c00 	.word	0x40013c00

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f10:	e003      	b.n	8000f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	401a      	ands	r2, r3
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d104      	bne.n	8000f4a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	041a      	lsls	r2, r3, #16
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 f9e0 	bl	8006340 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e10f      	b.n	80011be <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fac8 	bl	8000548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2224      	movs	r2, #36	; 0x24
 8000fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fd0:	f000 fd0c 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8000fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a7b      	ldr	r2, [pc, #492]	; (80011c8 <HAL_I2C_Init+0x23c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d807      	bhi.n	8000ff0 <HAL_I2C_Init+0x64>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a7a      	ldr	r2, [pc, #488]	; (80011cc <HAL_I2C_Init+0x240>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bf94      	ite	ls
 8000fe8:	2301      	movls	r3, #1
 8000fea:	2300      	movhi	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	e006      	b.n	8000ffe <HAL_I2C_Init+0x72>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a77      	ldr	r2, [pc, #476]	; (80011d0 <HAL_I2C_Init+0x244>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	bf94      	ite	ls
 8000ff8:	2301      	movls	r3, #1
 8000ffa:	2300      	movhi	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0db      	b.n	80011be <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a72      	ldr	r2, [pc, #456]	; (80011d4 <HAL_I2C_Init+0x248>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9b      	lsrs	r3, r3, #18
 8001010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	430a      	orrs	r2, r1
 8001024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a64      	ldr	r2, [pc, #400]	; (80011c8 <HAL_I2C_Init+0x23c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d802      	bhi.n	8001040 <HAL_I2C_Init+0xb4>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3301      	adds	r3, #1
 800103e:	e009      	b.n	8001054 <HAL_I2C_Init+0xc8>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	4a63      	ldr	r2, [pc, #396]	; (80011d8 <HAL_I2C_Init+0x24c>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	3301      	adds	r3, #1
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	430b      	orrs	r3, r1
 800105a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4956      	ldr	r1, [pc, #344]	; (80011c8 <HAL_I2C_Init+0x23c>)
 8001070:	428b      	cmp	r3, r1
 8001072:	d80d      	bhi.n	8001090 <HAL_I2C_Init+0x104>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1e59      	subs	r1, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001088:	2b04      	cmp	r3, #4
 800108a:	bf38      	it	cc
 800108c:	2304      	movcc	r3, #4
 800108e:	e04f      	b.n	8001130 <HAL_I2C_Init+0x1a4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d111      	bne.n	80010bc <HAL_I2C_Init+0x130>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1e58      	subs	r0, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	440b      	add	r3, r1
 80010a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	e012      	b.n	80010e2 <HAL_I2C_Init+0x156>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1e58      	subs	r0, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	0099      	lsls	r1, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_Init+0x15e>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e022      	b.n	8001130 <HAL_I2C_Init+0x1a4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10e      	bne.n	8001110 <HAL_I2C_Init+0x184>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e58      	subs	r0, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6859      	ldr	r1, [r3, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	440b      	add	r3, r1
 8001100:	fbb0 f3f3 	udiv	r3, r0, r3
 8001104:	3301      	adds	r3, #1
 8001106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110e:	e00f      	b.n	8001130 <HAL_I2C_Init+0x1a4>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1e58      	subs	r0, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	0099      	lsls	r1, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	fbb0 f3f3 	udiv	r3, r0, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	6809      	ldr	r1, [r1, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800115e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6911      	ldr	r1, [r2, #16]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68d2      	ldr	r2, [r2, #12]
 800116a:	4311      	orrs	r1, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	430b      	orrs	r3, r1
 8001172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	000186a0 	.word	0x000186a0
 80011cc:	001e847f 	.word	0x001e847f
 80011d0:	003d08ff 	.word	0x003d08ff
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	10624dd3 	.word	0x10624dd3

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e22d      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4ba3      	ldr	r3, [pc, #652]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b99      	ldr	r3, [pc, #612]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e208      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b84      	ldr	r3, [pc, #528]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a80      	ldr	r2, [pc, #512]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb8e 	bl	80009b4 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fb8a 	bl	80009b4 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1cd      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb7a 	bl	80009b4 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb76 	bl	80009b4 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1b9      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e18d      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4952      	ldr	r1, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fb2f 	bl	80009b4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fb2b 	bl	80009b4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e16e      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b46      	ldr	r3, [pc, #280]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4940      	ldr	r1, [pc, #256]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x2b0>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fb0e 	bl	80009b4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fb0a 	bl	80009b4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e14d      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff faee 	bl	80009b4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff faea 	bl	80009b4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e12d      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e015      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fad7 	bl	80009b4 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fad3 	bl	80009b4 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e116      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a0 	beq.w	8001576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d121      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_RCC_OscConfig+0x2b8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fa99 	bl	80009b4 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e011      	b.n	80014aa <HAL_RCC_OscConfig+0x2ce>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
 8001494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff fa8c 	bl	80009b4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0cf      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f0>
 80014be:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a65      	ldr	r2, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ca:	e01c      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d10c      	bne.n	80014ee <HAL_RCC_OscConfig+0x312>
 80014d4:	4b60      	ldr	r3, [pc, #384]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6713      	str	r3, [r2, #112]	; 0x70
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	4a5c      	ldr	r2, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6713      	str	r3, [r2, #112]	; 0x70
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x32a>
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a59      	ldr	r2, [pc, #356]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a56      	ldr	r2, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d015      	beq.n	800153a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fa51 	bl	80009b4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fa4d 	bl	80009b4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e08e      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ee      	beq.n	8001516 <HAL_RCC_OscConfig+0x33a>
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fa3b 	bl	80009b4 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fa37 	bl	80009b4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e078      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ee      	bne.n	8001542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d105      	bne.n	8001576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 8001570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d064      	beq.n	8001648 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d05c      	beq.n	8001644 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d141      	bne.n	8001616 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x480>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fa0c 	bl	80009b4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fa08 	bl	80009b4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e04b      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	491d      	ldr	r1, [pc, #116]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_RCC_OscConfig+0x480>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff f9e1 	bl	80009b4 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff f9dd 	bl	80009b4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e020      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x41a>
 8001614:	e018      	b.n	8001648 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_RCC_OscConfig+0x480>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff f9ca 	bl	80009b4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f9c6 	bl	80009b4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e009      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_RCC_OscConfig+0x47c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x448>
 8001642:	e001      	b.n	8001648 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	40023800 	.word	0x40023800
 800165c:	42470060 	.word	0x42470060

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ca      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b6      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494c      	ldr	r1, [pc, #304]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07d      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06d      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e065      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4933      	ldr	r1, [pc, #204]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff f930 	bl	80009b4 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff f92c 	bl	80009b4 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04d      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_RCC_ClockConfig+0x1b4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e030      	b.n	800180a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4915      	ldr	r1, [pc, #84]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490d      	ldr	r1, [pc, #52]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f81d 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017ea:	4601      	mov	r1, r0
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	fa21 f303 	lsr.w	r3, r1, r3
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f7ff f892 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00
 8001818:	40023800 	.word	0x40023800
 800181c:	08006468 	.word	0x08006468
 8001820:	20000000 	.word	0x20000000

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d007      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x32>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d008      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x38>
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 80b4 	bne.w	80019b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001852:	60bb      	str	r3, [r7, #8]
       break;
 8001854:	e0b3      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001858:	60bb      	str	r3, [r7, #8]
      break;
 800185a:	e0b0      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185c:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04a      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	ea03 0501 	and.w	r5, r3, r1
 8001888:	ea04 0602 	and.w	r6, r4, r2
 800188c:	4629      	mov	r1, r5
 800188e:	4632      	mov	r2, r6
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	0154      	lsls	r4, r2, #5
 800189a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800189e:	014b      	lsls	r3, r1, #5
 80018a0:	4619      	mov	r1, r3
 80018a2:	4622      	mov	r2, r4
 80018a4:	1b49      	subs	r1, r1, r5
 80018a6:	eb62 0206 	sbc.w	r2, r2, r6
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	0194      	lsls	r4, r2, #6
 80018b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b8:	018b      	lsls	r3, r1, #6
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	eb64 0402 	sbc.w	r4, r4, r2
 80018c0:	f04f 0100 	mov.w	r1, #0
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	00e2      	lsls	r2, r4, #3
 80018ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ce:	00d9      	lsls	r1, r3, #3
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	195b      	adds	r3, r3, r5
 80018d6:	eb44 0406 	adc.w	r4, r4, r6
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	0262      	lsls	r2, r4, #9
 80018e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018e8:	0259      	lsls	r1, r3, #9
 80018ea:	460b      	mov	r3, r1
 80018ec:	4614      	mov	r4, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	4621      	mov	r1, r4
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f04f 0400 	mov.w	r4, #0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	f7fe fc78 	bl	80001f0 <__aeabi_uldivmod>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e049      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	ea03 0501 	and.w	r5, r3, r1
 800191e:	ea04 0602 	and.w	r6, r4, r2
 8001922:	4629      	mov	r1, r5
 8001924:	4632      	mov	r2, r6
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	f04f 0400 	mov.w	r4, #0
 800192e:	0154      	lsls	r4, r2, #5
 8001930:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001934:	014b      	lsls	r3, r1, #5
 8001936:	4619      	mov	r1, r3
 8001938:	4622      	mov	r2, r4
 800193a:	1b49      	subs	r1, r1, r5
 800193c:	eb62 0206 	sbc.w	r2, r2, r6
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	0194      	lsls	r4, r2, #6
 800194a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800194e:	018b      	lsls	r3, r1, #6
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	eb64 0402 	sbc.w	r4, r4, r2
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	00e2      	lsls	r2, r4, #3
 8001960:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001964:	00d9      	lsls	r1, r3, #3
 8001966:	460b      	mov	r3, r1
 8001968:	4614      	mov	r4, r2
 800196a:	195b      	adds	r3, r3, r5
 800196c:	eb44 0406 	adc.w	r4, r4, r6
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	02a2      	lsls	r2, r4, #10
 800197a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800197e:	0299      	lsls	r1, r3, #10
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	4618      	mov	r0, r3
 8001986:	4621      	mov	r1, r4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f04f 0400 	mov.w	r4, #0
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	f7fe fc2d 	bl	80001f0 <__aeabi_uldivmod>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	60bb      	str	r3, [r7, #8]
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019ba:	60bb      	str	r3, [r7, #8]
      break;
 80019bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019be:	68bb      	ldr	r3, [r7, #8]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08006478 	.word	0x08006478

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08006478 	.word	0x08006478

08001a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e056      	b.n	8001afc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fdb5 	bl	80005d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	ea42 0103 	orr.w	r1, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	f003 0104 	and.w	r1, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e01d      	b.n	8001b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fd9c 	bl	8000668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f000 fa90 	bl	8002068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e01d      	b.n	8001ba8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f815 	bl	8001bb0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f000 fa65 	bl	8002068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0202 	mvn.w	r2, #2
 8001bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fa0f 	bl	800202a <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa01 	bl	8002016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fa12 	bl	800203e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0204 	mvn.w	r2, #4
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9e5 	bl	800202a <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f9d7 	bl	8002016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f9e8 	bl	800203e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0208 	mvn.w	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9bb 	bl	800202a <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f9ad 	bl	8002016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f9be 	bl	800203e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0210 	mvn.w	r2, #16
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f991 	bl	800202a <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f983 	bl	8002016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f994 	bl	800203e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f95d 	bl	8002002 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b80      	cmp	r3, #128	; 0x80
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fc6f 	bl	8002652 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d10e      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d107      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f959 	bl	8002052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d10e      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d107      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0220 	mvn.w	r2, #32
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fc39 	bl	800263e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_OC_ConfigChannel+0x1a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e04e      	b.n	8001e8c <HAL_TIM_OC_ConfigChannel+0xb8>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d839      	bhi.n	8001e78 <HAL_TIM_OC_ConfigChannel+0xa4>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <HAL_TIM_OC_ConfigChannel+0x38>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e41 	.word	0x08001e41
 8001e10:	08001e79 	.word	0x08001e79
 8001e14:	08001e79 	.word	0x08001e79
 8001e18:	08001e79 	.word	0x08001e79
 8001e1c:	08001e4f 	.word	0x08001e4f
 8001e20:	08001e79 	.word	0x08001e79
 8001e24:	08001e79 	.word	0x08001e79
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e5d 	.word	0x08001e5d
 8001e30:	08001e79 	.word	0x08001e79
 8001e34:	08001e79 	.word	0x08001e79
 8001e38:	08001e79 	.word	0x08001e79
 8001e3c:	08001e6b 	.word	0x08001e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f98e 	bl	8002168 <TIM_OC1_SetConfig>
      break;
 8001e4c:	e015      	b.n	8001e7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f9ed 	bl	8002234 <TIM_OC2_SetConfig>
      break;
 8001e5a:	e00e      	b.n	8001e7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fa52 	bl	800230c <TIM_OC3_SetConfig>
      break;
 8001e68:	e007      	b.n	8001e7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fab5 	bl	80023e0 <TIM_OC4_SetConfig>
      break;
 8001e76:	e000      	b.n	8001e7a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8001e78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x18>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e0a6      	b.n	8001ffa <HAL_TIM_ConfigClockSource+0x166>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	d067      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0x120>
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d80b      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x6c>
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d073      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x140>
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d802      	bhi.n	8001ef6 <HAL_TIM_ConfigClockSource+0x62>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d06f      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001ef4:	e078      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d06c      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x140>
 8001efa:	2b30      	cmp	r3, #48	; 0x30
 8001efc:	d06a      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001efe:	e073      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f00:	2b70      	cmp	r3, #112	; 0x70
 8001f02:	d00d      	beq.n	8001f20 <HAL_TIM_ConfigClockSource+0x8c>
 8001f04:	2b70      	cmp	r3, #112	; 0x70
 8001f06:	d804      	bhi.n	8001f12 <HAL_TIM_ConfigClockSource+0x7e>
 8001f08:	2b50      	cmp	r3, #80	; 0x50
 8001f0a:	d033      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0xe0>
 8001f0c:	2b60      	cmp	r3, #96	; 0x60
 8001f0e:	d041      	beq.n	8001f94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f10:	e06a      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f16:	d066      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x152>
 8001f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f1c:	d017      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f1e:	e063      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f000 fb20 	bl	8002574 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
      break;
 8001f4c:	e04c      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f000 fb09 	bl	8002574 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f70:	609a      	str	r2, [r3, #8]
      break;
 8001f72:	e039      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f000 fa7d 	bl	8002480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2150      	movs	r1, #80	; 0x50
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fad6 	bl	800253e <TIM_ITRx_SetConfig>
      break;
 8001f92:	e029      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f000 fa9c 	bl	80024de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2160      	movs	r1, #96	; 0x60
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fac6 	bl	800253e <TIM_ITRx_SetConfig>
      break;
 8001fb2:	e019      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f000 fa5d 	bl	8002480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fab6 	bl	800253e <TIM_ITRx_SetConfig>
      break;
 8001fd2:	e009      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 faad 	bl	800253e <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00f      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d00b      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a30      	ldr	r2, [pc, #192]	; (8002154 <TIM_Base_SetConfig+0xec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a22      	ldr	r2, [pc, #136]	; (8002150 <TIM_Base_SetConfig+0xe8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <TIM_Base_SetConfig+0xec>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <TIM_Base_SetConfig+0xf0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <TIM_Base_SetConfig+0xf4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <TIM_Base_SetConfig+0xf8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <TIM_Base_SetConfig+0xfc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <TIM_Base_SetConfig+0xe4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000
 8002150:	40000400 	.word	0x40000400
 8002154:	40000800 	.word	0x40000800
 8002158:	40000c00 	.word	0x40000c00
 800215c:	40014000 	.word	0x40014000
 8002160:	40014400 	.word	0x40014400
 8002164:	40014800 	.word	0x40014800

08002168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0201 	bic.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f023 0302 	bic.w	r3, r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <TIM_OC1_SetConfig+0xc8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10c      	bne.n	80021de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0308 	bic.w	r3, r3, #8
 80021ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a13      	ldr	r2, [pc, #76]	; (8002230 <TIM_OC1_SetConfig+0xc8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d111      	bne.n	800220a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	621a      	str	r2, [r3, #32]
}
 8002224:	bf00      	nop
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40010000 	.word	0x40010000

08002234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f023 0210 	bic.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0320 	bic.w	r3, r3, #32
 800227e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <TIM_OC2_SetConfig+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10d      	bne.n	80022b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800229a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <TIM_OC2_SetConfig+0xd4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d113      	bne.n	80022e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	621a      	str	r2, [r3, #32]
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000

0800230c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <TIM_OC3_SetConfig+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10d      	bne.n	8002386 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <TIM_OC3_SetConfig+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d113      	bne.n	80023b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800239c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40010000 	.word	0x40010000

080023e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	031b      	lsls	r3, r3, #12
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <TIM_OC4_SetConfig+0x9c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d109      	bne.n	8002454 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000

08002480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 030a 	bic.w	r3, r3, #10
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024de:	b480      	push	{r7}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0210 	bic.w	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	031b      	lsls	r3, r3, #12
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800251a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	621a      	str	r2, [r3, #32]
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	f043 0307 	orr.w	r3, r3, #7
 8002560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	021a      	lsls	r2, r3, #8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	431a      	orrs	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	609a      	str	r2, [r3, #8]
}
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e032      	b.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002604:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e03f      	b.n	80026f8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fe f84d 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2224      	movs	r2, #36	; 0x24
 8002696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f90c 	bl	80028c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b20      	cmp	r3, #32
 800271e:	f040 8083 	bne.w	8002828 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_UART_Transmit+0x2e>
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07b      	b.n	800282a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_UART_Transmit+0x40>
 800273c:	2302      	movs	r3, #2
 800273e:	e074      	b.n	800282a <HAL_UART_Transmit+0x12a>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2221      	movs	r2, #33	; 0x21
 8002752:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002756:	f7fe f92d 	bl	80009b4 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002768:	e042      	b.n	80027f0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d122      	bne.n	80027c8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f850 	bl	8002832 <UART_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e046      	b.n	800282a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ae:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3302      	adds	r3, #2
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	e017      	b.n	80027f0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	e013      	b.n	80027f0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f82d 	bl	8002832 <UART_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e023      	b.n	800282a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	60ba      	str	r2, [r7, #8]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1b7      	bne.n	800276a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f814 	bl	8002832 <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00a      	b.n	800282a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002828:	2302      	movs	r3, #2
  }
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002842:	e02c      	b.n	800289e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284a:	d028      	beq.n	800289e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <UART_WaitOnFlagUntilTimeout+0x30>
 8002852:	f7fe f8af 	bl	80009b4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	429a      	cmp	r2, r3
 8002860:	d21d      	bcs.n	800289e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002870:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e00f      	b.n	80028be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4013      	ands	r3, r2
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d0c3      	beq.n	8002844 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002908:	f023 030c 	bic.w	r3, r3, #12
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	68f9      	ldr	r1, [r7, #12]
 8002912:	430b      	orrs	r3, r1
 8002914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002934:	f040 80e4 	bne.w	8002b00 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4aab      	ldr	r2, [pc, #684]	; (8002bec <UART_SetConfig+0x324>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <UART_SetConfig+0x84>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4aaa      	ldr	r2, [pc, #680]	; (8002bf0 <UART_SetConfig+0x328>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d16c      	bne.n	8002a26 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800294c:	f7ff f862 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002950:	4602      	mov	r2, r0
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4aa3      	ldr	r2, [pc, #652]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	011c      	lsls	r4, r3, #4
 8002970:	f7ff f850 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002974:	4602      	mov	r2, r0
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009a      	lsls	r2, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fbb2 f5f3 	udiv	r5, r2, r3
 800298a:	f7ff f843 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 800298e:	4602      	mov	r2, r0
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009a      	lsls	r2, r3, #2
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	4a93      	ldr	r2, [pc, #588]	; (8002bf4 <UART_SetConfig+0x32c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2264      	movs	r2, #100	; 0x64
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	1aeb      	subs	r3, r5, r3
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a8e      	ldr	r2, [pc, #568]	; (8002bf4 <UART_SetConfig+0x32c>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029c6:	441c      	add	r4, r3
 80029c8:	f7ff f824 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fbb2 f5f3 	udiv	r5, r2, r3
 80029e2:	f7ff f817 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	4a7d      	ldr	r2, [pc, #500]	; (8002bf4 <UART_SetConfig+0x32c>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	; 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1aeb      	subs	r3, r5, r3
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	3332      	adds	r3, #50	; 0x32
 8002a10:	4a78      	ldr	r2, [pc, #480]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 0207 	and.w	r2, r3, #7
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4422      	add	r2, r4
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e154      	b.n	8002cd0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a26:	f7fe ffe1 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009a      	lsls	r2, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	4a6c      	ldr	r2, [pc, #432]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	011c      	lsls	r4, r3, #4
 8002a4a:	f7fe ffcf 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a64:	f7fe ffc2 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a5d      	ldr	r2, [pc, #372]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	2264      	movs	r2, #100	; 0x64
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	1aeb      	subs	r3, r5, r3
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	3332      	adds	r3, #50	; 0x32
 8002a92:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aa0:	441c      	add	r4, r3
 8002aa2:	f7fe ffa3 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002abc:	f7fe ff96 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009a      	lsls	r2, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	2264      	movs	r2, #100	; 0x64
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	1aeb      	subs	r3, r5, r3
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	3332      	adds	r3, #50	; 0x32
 8002aea:	4a42      	ldr	r2, [pc, #264]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	f003 0207 	and.w	r2, r3, #7
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4422      	add	r2, r4
 8002afc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002afe:	e0e7      	b.n	8002cd0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a39      	ldr	r2, [pc, #228]	; (8002bec <UART_SetConfig+0x324>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <UART_SetConfig+0x24c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <UART_SetConfig+0x328>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d171      	bne.n	8002bf8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b14:	f7fe ff7e 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	011c      	lsls	r4, r3, #4
 8002b38:	f7fe ff6c 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	441a      	add	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b52:	f7fe ff5f 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2264      	movs	r2, #100	; 0x64
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	1aeb      	subs	r3, r5, r3
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	3332      	adds	r3, #50	; 0x32
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8c:	441c      	add	r4, r3
 8002b8e:	f7fe ff41 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	441a      	add	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ba8:	f7fe ff34 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	441a      	add	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	2264      	movs	r2, #100	; 0x64
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	1aeb      	subs	r3, r5, r3
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	3332      	adds	r3, #50	; 0x32
 8002bd6:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <UART_SetConfig+0x32c>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4422      	add	r2, r4
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	e071      	b.n	8002cd0 <UART_SetConfig+0x408>
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bf8:	f7fe fef8 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009a      	lsls	r2, r3, #2
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <UART_SetConfig+0x410>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	011c      	lsls	r4, r3, #4
 8002c1c:	f7fe fee6 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009a      	lsls	r2, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c36:	f7fe fed9 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <UART_SetConfig+0x410>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2264      	movs	r2, #100	; 0x64
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	1aeb      	subs	r3, r5, r3
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	3332      	adds	r3, #50	; 0x32
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <UART_SetConfig+0x410>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	441c      	add	r4, r3
 8002c72:	f7fe febb 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009a      	lsls	r2, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c8c:	f7fe feae 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009a      	lsls	r2, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <UART_SetConfig+0x410>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2264      	movs	r2, #100	; 0x64
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	1aeb      	subs	r3, r5, r3
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <UART_SetConfig+0x410>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4422      	add	r2, r4
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	e7ff      	b.n	8002cd0 <UART_SetConfig+0x408>
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd8:	51eb851f 	.word	0x51eb851f

08002cdc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ce2:	f3ef 8305 	mrs	r3, IPSR
 8002ce6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cee:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf2:	607b      	str	r3, [r7, #4]
  return(result);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <osKernelInitialize+0x32>
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <osKernelInitialize+0x64>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d109      	bne.n	8002d16 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d02:	f3ef 8311 	mrs	r3, BASEPRI
 8002d06:	603b      	str	r3, [r7, #0]
  return(result);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d0e:	f06f 0305 	mvn.w	r3, #5
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e00c      	b.n	8002d30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <osKernelInitialize+0x64>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <osKernelInitialize+0x64>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e002      	b.n	8002d30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000030 	.word	0x20000030

08002d44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d4a:	f3ef 8305 	mrs	r3, IPSR
 8002d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d56:	f3ef 8310 	mrs	r3, PRIMASK
 8002d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <osKernelStart+0x32>
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <osKernelStart+0x64>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d109      	bne.n	8002d7e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002d76:	f06f 0305 	mvn.w	r3, #5
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e00e      	b.n	8002d9c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <osKernelStart+0x64>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <osKernelStart+0x64>)
 8002d88:	2202      	movs	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002d8c:	f001 fa50 	bl	8004230 <vTaskStartScheduler>
      stat = osOK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000030 	.word	0x20000030

08002dac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b092      	sub	sp, #72	; 0x48
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dbc:	f3ef 8305 	mrs	r3, IPSR
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 8094 	bne.w	8002ef2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dca:	f3ef 8310 	mrs	r3, PRIMASK
 8002dce:	623b      	str	r3, [r7, #32]
  return(result);
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 808d 	bne.w	8002ef2 <osThreadNew+0x146>
 8002dd8:	4b48      	ldr	r3, [pc, #288]	; (8002efc <osThreadNew+0x150>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d106      	bne.n	8002dee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002de0:	f3ef 8311 	mrs	r3, BASEPRI
 8002de4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 8082 	bne.w	8002ef2 <osThreadNew+0x146>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d07e      	beq.n	8002ef2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002df8:	2318      	movs	r3, #24
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e00:	f107 031b 	add.w	r3, r7, #27
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d045      	beq.n	8002e9e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <osThreadNew+0x74>
        name = attr->name;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <osThreadNew+0x9a>
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b38      	cmp	r3, #56	; 0x38
 8002e38:	d805      	bhi.n	8002e46 <osThreadNew+0x9a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <osThreadNew+0x9e>
        return (NULL);
 8002e46:	2300      	movs	r3, #0
 8002e48:	e054      	b.n	8002ef4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <osThreadNew+0xd4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b5b      	cmp	r3, #91	; 0x5b
 8002e68:	d90a      	bls.n	8002e80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <osThreadNew+0xd4>
        mem = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7e:	e010      	b.n	8002ea2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10c      	bne.n	8002ea2 <osThreadNew+0xf6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <osThreadNew+0xf6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <osThreadNew+0xf6>
          mem = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9c:	e001      	b.n	8002ea2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d110      	bne.n	8002eca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002eb0:	9202      	str	r2, [sp, #8]
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 ffee 	bl	8003ea0 <xTaskCreateStatic>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e013      	b.n	8002ef2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d110      	bne.n	8002ef2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f001 f835 	bl	8003f52 <xTaskCreate>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <osThreadNew+0x146>
          hTask = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ef2:	697b      	ldr	r3, [r7, #20]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3738      	adds	r7, #56	; 0x38
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000030 	.word	0x20000030

08002f00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f08:	f3ef 8305 	mrs	r3, IPSR
 8002f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10f      	bne.n	8002f34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f14:	f3ef 8310 	mrs	r3, PRIMASK
 8002f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <osDelay+0x34>
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <osDelay+0x58>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d109      	bne.n	8002f3c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f28:	f3ef 8311 	mrs	r3, BASEPRI
 8002f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <osDelay+0x3c>
    stat = osErrorISR;
 8002f34:	f06f 0305 	mvn.w	r3, #5
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e007      	b.n	8002f4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 f93e 	bl	80041c8 <vTaskDelay>
    }
  }

  return (stat);
 8002f4c:	697b      	ldr	r3, [r7, #20]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000030 	.word	0x20000030

08002f5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <vApplicationGetIdleTaskMemory+0x30>)
 8002f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	601a      	str	r2, [r3, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000034 	.word	0x20000034
 8002f8c:	20000090 	.word	0x20000090

08002f90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <vApplicationGetTimerTaskMemory+0x2c>)
 8002fa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <vApplicationGetTimerTaskMemory+0x30>)
 8002fa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	20000290 	.word	0x20000290
 8002fc0:	200002ec 	.word	0x200002ec

08002fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 0208 	add.w	r2, r3, #8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 0208 	add.w	r2, r3, #8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307c:	d103      	bne.n	8003086 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e00c      	b.n	80030a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3308      	adds	r3, #8
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e002      	b.n	8003094 <vListInsert+0x2e>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	429a      	cmp	r2, r3
 800309e:	d2f6      	bcs.n	800308e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d103      	bne.n	800310c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1e5a      	subs	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	e7fe      	b.n	8003152 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003154:	f002 fac2 	bl	80056dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	68f9      	ldr	r1, [r7, #12]
 8003162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	3b01      	subs	r3, #1
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	441a      	add	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	; 0xff
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d114      	bne.n	80031d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01a      	beq.n	80031e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3310      	adds	r3, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fac0 	bl	800473c <xTaskRemoveFromEventList>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <xQueueGenericReset+0xcc>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	e009      	b.n	80031e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3310      	adds	r3, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fef3 	bl	8002fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3324      	adds	r3, #36	; 0x24
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff feee 	bl	8002fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031e8:	f002 faa6 	bl	8005738 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08e      	sub	sp, #56	; 0x38
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <xQueueGenericCreateStatic+0x28>
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 8003222:	e7fe      	b.n	8003222 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <xQueueGenericCreateStatic+0x42>
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e7fe      	b.n	800323c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <xQueueGenericCreateStatic+0x4e>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <xQueueGenericCreateStatic+0x52>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <xQueueGenericCreateStatic+0x54>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <xQueueGenericCreateStatic+0x6c>
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	e7fe      	b.n	8003266 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <xQueueGenericCreateStatic+0x78>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <xQueueGenericCreateStatic+0x7c>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <xQueueGenericCreateStatic+0x7e>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <xQueueGenericCreateStatic+0x96>
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e7fe      	b.n	8003290 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003292:	2350      	movs	r3, #80	; 0x50
 8003294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b50      	cmp	r3, #80	; 0x50
 800329a:	d009      	beq.n	80032b0 <xQueueGenericCreateStatic+0xb4>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e7fe      	b.n	80032ae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f842 	bl	800335a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032d8:	4618      	mov	r0, r3
 80032da:	3730      	adds	r7, #48	; 0x30
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <xQueueGenericCreate+0x28>
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	e7fe      	b.n	8003306 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e004      	b.n	800331e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3350      	adds	r3, #80	; 0x50
 8003322:	4618      	mov	r0, r3
 8003324:	f002 faf4 	bl	8005910 <pvPortMalloc>
 8003328:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00f      	beq.n	8003350 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	3350      	adds	r3, #80	; 0x50
 8003334:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800333e:	79fa      	ldrb	r2, [r7, #7]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f805 	bl	800335a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003350:	69bb      	ldr	r3, [r7, #24]
	}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e002      	b.n	800337c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003388:	2101      	movs	r1, #1
 800338a:	69b8      	ldr	r0, [r7, #24]
 800338c:	f7ff fece 	bl	800312c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	; 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ae:	2300      	movs	r3, #0
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <xQueueGenericSend+0x30>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ce:	e7fe      	b.n	80033ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <xQueueGenericSend+0x3e>
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <xQueueGenericSend+0x42>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <xQueueGenericSend+0x44>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <xQueueGenericSend+0x5c>
 80033e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e7fe      	b.n	80033fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d103      	bne.n	800340a <xQueueGenericSend+0x6a>
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <xQueueGenericSend+0x6e>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <xQueueGenericSend+0x70>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <xQueueGenericSend+0x88>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	e7fe      	b.n	8003426 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003428:	f001 fb44 	bl	8004ab4 <xTaskGetSchedulerState>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <xQueueGenericSend+0x98>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <xQueueGenericSend+0x9c>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <xQueueGenericSend+0x9e>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <xQueueGenericSend+0xb6>
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e7fe      	b.n	8003454 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003456:	f002 f941 	bl	80056dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <xQueueGenericSend+0xcc>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d129      	bne.n	80034c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003472:	f000 fba9 	bl	8003bc8 <prvCopyDataToQueue>
 8003476:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f959 	bl	800473c <xTaskRemoveFromEventList>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <xQueueGenericSend+0x1f0>)
 8003492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	e00a      	b.n	80034b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <xQueueGenericSend+0x1f0>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034b8:	f002 f93e 	bl	8005738 <vPortExitCritical>
				return pdPASS;
 80034bc:	2301      	movs	r3, #1
 80034be:	e063      	b.n	8003588 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034c6:	f002 f937 	bl	8005738 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e05c      	b.n	8003588 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f991 	bl	8004800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034e2:	f002 f929 	bl	8005738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034e6:	f000 ff07 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034ea:	f002 f8f7 	bl	80056dc <vPortEnterCritical>
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f4:	b25b      	sxtb	r3, r3
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fa:	d103      	bne.n	8003504 <xQueueGenericSend+0x164>
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350a:	b25b      	sxtb	r3, r3
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003510:	d103      	bne.n	800351a <xQueueGenericSend+0x17a>
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800351a:	f002 f90d 	bl	8005738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351e:	1d3a      	adds	r2, r7, #4
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f001 f980 	bl	800482c <xTaskCheckForTimeOut>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d124      	bne.n	800357c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003534:	f000 fc40 	bl	8003db8 <prvIsQueueFull>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	3310      	adds	r3, #16
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f8aa 	bl	80046a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800354c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354e:	f000 fbcb 	bl	8003ce8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003552:	f000 fedf 	bl	8004314 <xTaskResumeAll>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f af7c 	bne.w	8003456 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <xQueueGenericSend+0x1f0>)
 8003560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	e772      	b.n	8003456 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003572:	f000 fbb9 	bl	8003ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003576:	f000 fecd 	bl	8004314 <xTaskResumeAll>
 800357a:	e76c      	b.n	8003456 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357e:	f000 fbb3 	bl	8003ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003582:	f000 fec7 	bl	8004314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003586:	2300      	movs	r3, #0
		}
	}
}
 8003588:	4618      	mov	r0, r3
 800358a:	3738      	adds	r7, #56	; 0x38
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	; 0x38
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <xQueueGenericSendFromISR+0x2c>
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e7fe      	b.n	80035be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSendFromISR+0x3a>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericSendFromISR+0x3e>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericSendFromISR+0x40>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <xQueueGenericSendFromISR+0x58>
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	e7fe      	b.n	80035ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSendFromISR+0x66>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSendFromISR+0x6a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSendFromISR+0x6c>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <xQueueGenericSendFromISR+0x84>
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e7fe      	b.n	8003616 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003618:	f002 f93c 	bl	8005894 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800361c:	f3ef 8211 	mrs	r2, BASEPRI
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	61ba      	str	r2, [r7, #24]
 8003632:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003634:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <xQueueGenericSendFromISR+0xb6>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d12c      	bne.n	80036a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800365a:	f000 fab5 	bl	8003bc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800365e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003666:	d112      	bne.n	800368e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	d016      	beq.n	800369e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	3324      	adds	r3, #36	; 0x24
 8003674:	4618      	mov	r0, r3
 8003676:	f001 f861 	bl	800473c <xTaskRemoveFromEventList>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800368e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003692:	3301      	adds	r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	b25a      	sxtb	r2, r3
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800369e:	2301      	movs	r3, #1
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036a2:	e001      	b.n	80036a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3738      	adds	r7, #56	; 0x38
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08e      	sub	sp, #56	; 0x38
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	e7fe      	b.n	80036e2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <xQueueGiveFromISR+0x44>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e7fe      	b.n	80036fe <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <xQueueGiveFromISR+0x54>
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <xQueueGiveFromISR+0x58>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <xQueueGiveFromISR+0x5a>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <xQueueGiveFromISR+0x72>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e7fe      	b.n	800372c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800372e:	f002 f8b1 	bl	8005894 <vPortValidateInterruptPriority>
	__asm volatile
 8003732:	f3ef 8211 	mrs	r2, BASEPRI
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	617a      	str	r2, [r7, #20]
 8003748:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800374a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375a:	429a      	cmp	r2, r3
 800375c:	d22b      	bcs.n	80037b6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003778:	d112      	bne.n	80037a0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f000 ffd8 	bl	800473c <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e007      	b.n	80037b0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a4:	3301      	adds	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
 80037b4:	e001      	b.n	80037ba <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3738      	adds	r7, #56	; 0x38
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <xQueueReceive+0x2e>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	e7fe      	b.n	80037fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <xQueueReceive+0x3c>
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <xQueueReceive+0x40>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <xQueueReceive+0x42>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <xQueueReceive+0x5a>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	e7fe      	b.n	8003828 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800382a:	f001 f943 	bl	8004ab4 <xTaskGetSchedulerState>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <xQueueReceive+0x6a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <xQueueReceive+0x6e>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueReceive+0x70>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <xQueueReceive+0x88>
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e7fe      	b.n	8003856 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003858:	f001 ff40 	bl	80056dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01f      	beq.n	80038a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386c:	f000 fa16 	bl	8003c9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	3310      	adds	r3, #16
 8003884:	4618      	mov	r0, r3
 8003886:	f000 ff59 	bl	800473c <xTaskRemoveFromEventList>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <xQueueReceive+0x1b4>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038a0:	f001 ff4a 	bl	8005738 <vPortExitCritical>
				return pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e069      	b.n	800397c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ae:	f001 ff43 	bl	8005738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e062      	b.n	800397c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 ff9d 	bl	8004800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038ca:	f001 ff35 	bl	8005738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ce:	f000 fd13 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038d2:	f001 ff03 	bl	80056dc <vPortEnterCritical>
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e2:	d103      	bne.n	80038ec <xQueueReceive+0x11c>
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f8:	d103      	bne.n	8003902 <xQueueReceive+0x132>
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003902:	f001 ff19 	bl	8005738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003906:	1d3a      	adds	r2, r7, #4
 8003908:	f107 0310 	add.w	r3, r7, #16
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 ff8c 	bl	800482c <xTaskCheckForTimeOut>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d123      	bne.n	8003962 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800391a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391c:	f000 fa36 	bl	8003d8c <prvIsQueueEmpty>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d017      	beq.n	8003956 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	3324      	adds	r3, #36	; 0x24
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f000 feb6 	bl	80046a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003936:	f000 f9d7 	bl	8003ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800393a:	f000 fceb 	bl	8004314 <xTaskResumeAll>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d189      	bne.n	8003858 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <xQueueReceive+0x1b4>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	e780      	b.n	8003858 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003958:	f000 f9c6 	bl	8003ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800395c:	f000 fcda 	bl	8004314 <xTaskResumeAll>
 8003960:	e77a      	b.n	8003858 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003964:	f000 f9c0 	bl	8003ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003968:	f000 fcd4 	bl	8004314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800396c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396e:	f000 fa0d 	bl	8003d8c <prvIsQueueEmpty>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	f43f af6f 	beq.w	8003858 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800397a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800397c:	4618      	mov	r0, r3
 800397e:	3730      	adds	r7, #48	; 0x30
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <xQueueSemaphoreTake+0x30>
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	e7fe      	b.n	80039b6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <xQueueSemaphoreTake+0x4c>
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e7fe      	b.n	80039d2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039d4:	f001 f86e 	bl	8004ab4 <xTaskGetSchedulerState>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <xQueueSemaphoreTake+0x5c>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <xQueueSemaphoreTake+0x60>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <xQueueSemaphoreTake+0x62>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <xQueueSemaphoreTake+0x7a>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e7fe      	b.n	8003a00 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a02:	f001 fe6b 	bl	80056dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d024      	beq.n	8003a5c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003a22:	f001 f9c3 	bl	8004dac <pvTaskIncrementMutexHeldCount>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00f      	beq.n	8003a54 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	3310      	adds	r3, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fe7f 	bl	800473c <xTaskRemoveFromEventList>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a44:	4b53      	ldr	r3, [pc, #332]	; (8003b94 <xQueueSemaphoreTake+0x20c>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a54:	f001 fe70 	bl	8005738 <vPortExitCritical>
				return pdPASS;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e096      	b.n	8003b8a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d110      	bne.n	8003a84 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <xQueueSemaphoreTake+0xf4>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e7fe      	b.n	8003a7a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a7c:	f001 fe5c 	bl	8005738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e082      	b.n	8003b8a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a8a:	f107 030c 	add.w	r3, r7, #12
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 feb6 	bl	8004800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a98:	f001 fe4e 	bl	8005738 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a9c:	f000 fc2c 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aa0:	f001 fe1c 	bl	80056dc <vPortEnterCritical>
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab0:	d103      	bne.n	8003aba <xQueueSemaphoreTake+0x132>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d103      	bne.n	8003ad0 <xQueueSemaphoreTake+0x148>
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad0:	f001 fe32 	bl	8005738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ad4:	463a      	mov	r2, r7
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fea5 	bl	800482c <xTaskCheckForTimeOut>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d132      	bne.n	8003b4e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aea:	f000 f94f 	bl	8003d8c <prvIsQueueEmpty>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d026      	beq.n	8003b42 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003afc:	f001 fdee 	bl	80056dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fff3 	bl	8004af0 <xTaskPriorityInherit>
 8003b0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b0c:	f001 fe14 	bl	8005738 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	3324      	adds	r3, #36	; 0x24
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fdc1 	bl	80046a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b20:	f000 f8e2 	bl	8003ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b24:	f000 fbf6 	bl	8004314 <xTaskResumeAll>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f47f af69 	bne.w	8003a02 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <xQueueSemaphoreTake+0x20c>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	e75f      	b.n	8003a02 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b44:	f000 f8d0 	bl	8003ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b48:	f000 fbe4 	bl	8004314 <xTaskResumeAll>
 8003b4c:	e759      	b.n	8003a02 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b50:	f000 f8ca 	bl	8003ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b54:	f000 fbde 	bl	8004314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b5a:	f000 f917 	bl	8003d8c <prvIsQueueEmpty>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f43f af4e 	beq.w	8003a02 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003b6c:	f001 fdb6 	bl	80056dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b72:	f000 f811 	bl	8003b98 <prvGetDisinheritPriorityAfterTimeout>
 8003b76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 f890 	bl	8004ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b84:	f001 fdd8 	bl	8005738 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3738      	adds	r7, #56	; 0x38
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e001      	b.n	8003bba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003bba:	68fb      	ldr	r3, [r7, #12]
	}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d14d      	bne.n	8003c8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 ffea 	bl	8004bcc <xTaskPriorityDisinherit>
 8003bf8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	e043      	b.n	8003c8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d119      	bne.n	8003c3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6898      	ldr	r0, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	461a      	mov	r2, r3
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	f002 fbd6 	bl	80063c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	441a      	add	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d32b      	bcc.n	8003c8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	e026      	b.n	8003c8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68d8      	ldr	r0, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	461a      	mov	r2, r3
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	f002 fbbc 	bl	80063c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	425b      	negs	r3, r3
 8003c56:	441a      	add	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d207      	bcs.n	8003c78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	425b      	negs	r3, r3
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d105      	bne.n	8003c8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c92:	697b      	ldr	r3, [r7, #20]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d018      	beq.n	8003ce0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d303      	bcc.n	8003cd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68d9      	ldr	r1, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6838      	ldr	r0, [r7, #0]
 8003cdc:	f002 fb72 	bl	80063c4 <memcpy>
	}
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cf0:	f001 fcf4 	bl	80056dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cfc:	e011      	b.n	8003d22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d012      	beq.n	8003d2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3324      	adds	r3, #36	; 0x24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fd16 	bl	800473c <xTaskRemoveFromEventList>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d16:	f000 fde9 	bl	80048ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	dce9      	bgt.n	8003cfe <prvUnlockQueue+0x16>
 8003d2a:	e000      	b.n	8003d2e <prvUnlockQueue+0x46>
					break;
 8003d2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d36:	f001 fcff 	bl	8005738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d3a:	f001 fccf 	bl	80056dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d46:	e011      	b.n	8003d6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3310      	adds	r3, #16
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fcf1 	bl	800473c <xTaskRemoveFromEventList>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d60:	f000 fdc4 	bl	80048ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d64:	7bbb      	ldrb	r3, [r7, #14]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	dce9      	bgt.n	8003d48 <prvUnlockQueue+0x60>
 8003d74:	e000      	b.n	8003d78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d80:	f001 fcda 	bl	8005738 <vPortExitCritical>
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d94:	f001 fca2 	bl	80056dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	e001      	b.n	8003daa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003daa:	f001 fcc5 	bl	8005738 <vPortExitCritical>

	return xReturn;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dc0:	f001 fc8c 	bl	80056dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d102      	bne.n	8003dd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e001      	b.n	8003dda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dda:	f001 fcad 	bl	8005738 <vPortExitCritical>

	return xReturn;
 8003dde:	68fb      	ldr	r3, [r7, #12]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e014      	b.n	8003e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003df8:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <vQueueAddToRegistry+0x4c>)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e04:	490b      	ldr	r1, [pc, #44]	; (8003e34 <vQueueAddToRegistry+0x4c>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <vQueueAddToRegistry+0x4c>)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e1a:	e005      	b.n	8003e28 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d9e7      	bls.n	8003df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20001a1c 	.word	0x20001a1c

08003e38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e48:	f001 fc48 	bl	80056dc <vPortEnterCritical>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e58:	d103      	bne.n	8003e62 <vQueueWaitForMessageRestricted+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6e:	d103      	bne.n	8003e78 <vQueueWaitForMessageRestricted+0x40>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	f001 fc5e 	bl	8005738 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fc2b 	bl	80046e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff28 	bl	8003ce8 <prvUnlockQueue>
	}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <xTaskCreateStatic+0x28>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	e7fe      	b.n	8003ec6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <xTaskCreateStatic+0x42>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ee2:	235c      	movs	r3, #92	; 0x5c
 8003ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8003eea:	d009      	beq.n	8003f00 <xTaskCreateStatic+0x60>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e7fe      	b.n	8003efe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01e      	beq.n	8003f44 <xTaskCreateStatic+0xa4>
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9302      	str	r3, [sp, #8]
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f850 	bl	8003fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f3e:	f000 f8d3 	bl	80040e8 <prvAddNewTaskToReadyList>
 8003f42:	e001      	b.n	8003f48 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f48:	697b      	ldr	r3, [r7, #20]
	}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08c      	sub	sp, #48	; 0x30
 8003f56:	af04      	add	r7, sp, #16
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fcd2 	bl	8005910 <pvPortMalloc>
 8003f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f74:	205c      	movs	r0, #92	; 0x5c
 8003f76:	f001 fccb 	bl	8005910 <pvPortMalloc>
 8003f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
 8003f88:	e005      	b.n	8003f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f001 fd4e 	bl	8005a2c <vPortFree>
 8003f90:	e001      	b.n	8003f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f80e 	bl	8003fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fc0:	69f8      	ldr	r0, [r7, #28]
 8003fc2:	f000 f891 	bl	80040e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e002      	b.n	8003fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	21a5      	movs	r1, #165	; 0xa5
 8003ff6:	f002 f9f0 	bl	80063da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004004:	3b01      	subs	r3, #1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <prvInitialiseNewTask+0x56>
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e7fe      	b.n	8004030 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e012      	b.n	800405e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	7819      	ldrb	r1, [r3, #0]
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	3334      	adds	r3, #52	; 0x34
 8004048:	460a      	mov	r2, r1
 800404a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d9e9      	bls.n	8004038 <prvInitialiseNewTask+0x5c>
 8004064:	e000      	b.n	8004068 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004066:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b37      	cmp	r3, #55	; 0x37
 8004074:	d901      	bls.n	800407a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004076:	2337      	movs	r3, #55	; 0x37
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ffb7 	bl	8003004 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	3318      	adds	r3, #24
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe ffb2 	bl	8003004 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	69b8      	ldr	r0, [r7, #24]
 80040ca:	f001 f9e1 	bl	8005490 <pxPortInitialiseStack>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040e0:	bf00      	nop
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040f0:	f001 faf4 	bl	80056dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <prvAddNewTaskToReadyList+0xc4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <prvAddNewTaskToReadyList+0xc4>)
 80040fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040fe:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <prvAddNewTaskToReadyList+0xc8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004106:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <prvAddNewTaskToReadyList+0xc8>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <prvAddNewTaskToReadyList+0xc4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d110      	bne.n	8004136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004114:	f000 fc0e 	bl	8004934 <prvInitialiseTaskLists>
 8004118:	e00d      	b.n	8004136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <prvAddNewTaskToReadyList+0xcc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <prvAddNewTaskToReadyList+0xc8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d802      	bhi.n	8004136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004130:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <prvAddNewTaskToReadyList+0xc8>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <prvAddNewTaskToReadyList+0xd0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <prvAddNewTaskToReadyList+0xd0>)
 800413e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <prvAddNewTaskToReadyList+0xd0>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <prvAddNewTaskToReadyList+0xd4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d903      	bls.n	800415c <prvAddNewTaskToReadyList+0x74>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <prvAddNewTaskToReadyList+0xd4>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <prvAddNewTaskToReadyList+0xd8>)
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fe ff53 	bl	800301e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004178:	f001 fade 	bl	8005738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <prvAddNewTaskToReadyList+0xcc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <prvAddNewTaskToReadyList+0xc8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	429a      	cmp	r2, r3
 8004190:	d207      	bcs.n	80041a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <prvAddNewTaskToReadyList+0xdc>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000bc0 	.word	0x20000bc0
 80041b0:	200006ec 	.word	0x200006ec
 80041b4:	20000bcc 	.word	0x20000bcc
 80041b8:	20000bdc 	.word	0x20000bdc
 80041bc:	20000bc8 	.word	0x20000bc8
 80041c0:	200006f0 	.word	0x200006f0
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <vTaskDelay+0x60>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <vTaskDelay+0x2e>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	e7fe      	b.n	80041f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80041f6:	f000 f87f 	bl	80042f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041fa:	2100      	movs	r1, #0
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fde9 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004202:	f000 f887 	bl	8004314 <xTaskResumeAll>
 8004206:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <vTaskDelay+0x64>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000be8 	.word	0x20000be8
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800423e:	463a      	mov	r2, r7
 8004240:	1d39      	adds	r1, r7, #4
 8004242:	f107 0308 	add.w	r3, r7, #8
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fe88 	bl	8002f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	9202      	str	r2, [sp, #8]
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	2300      	movs	r3, #0
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2300      	movs	r3, #0
 800425c:	460a      	mov	r2, r1
 800425e:	4920      	ldr	r1, [pc, #128]	; (80042e0 <vTaskStartScheduler+0xb0>)
 8004260:	4820      	ldr	r0, [pc, #128]	; (80042e4 <vTaskStartScheduler+0xb4>)
 8004262:	f7ff fe1d 	bl	8003ea0 <xTaskCreateStatic>
 8004266:	4602      	mov	r2, r0
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <vTaskStartScheduler+0xb8>)
 800426a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800426c:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <vTaskStartScheduler+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e001      	b.n	800427e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004284:	f000 fdfa 	bl	8004e7c <xTimerCreateTimerTask>
 8004288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d115      	bne.n	80042bc <vTaskStartScheduler+0x8c>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <vTaskStartScheduler+0xbc>)
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <vTaskStartScheduler+0xc0>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <vTaskStartScheduler+0xc4>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b6:	f001 f973 	bl	80055a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042ba:	e00d      	b.n	80042d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c2:	d109      	bne.n	80042d8 <vTaskStartScheduler+0xa8>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e7fe      	b.n	80042d6 <vTaskStartScheduler+0xa6>
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08006404 	.word	0x08006404
 80042e4:	08004905 	.word	0x08004905
 80042e8:	20000be4 	.word	0x20000be4
 80042ec:	20000be0 	.word	0x20000be0
 80042f0:	20000bcc 	.word	0x20000bcc
 80042f4:	20000bc4 	.word	0x20000bc4

080042f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <vTaskSuspendAll+0x18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <vTaskSuspendAll+0x18>)
 8004304:	6013      	str	r3, [r2, #0]
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000be8 	.word	0x20000be8

08004314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <xTaskResumeAll+0x114>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <xTaskResumeAll+0x2a>
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	e7fe      	b.n	800433c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800433e:	f001 f9cd 	bl	80056dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <xTaskResumeAll+0x114>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a37      	ldr	r2, [pc, #220]	; (8004428 <xTaskResumeAll+0x114>)
 800434a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <xTaskResumeAll+0x114>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d162      	bne.n	800441a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <xTaskResumeAll+0x118>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05e      	beq.n	800441a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800435c:	e02f      	b.n	80043be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <xTaskResumeAll+0x11c>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3318      	adds	r3, #24
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe feb4 	bl	80030d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe feaf 	bl	80030d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <xTaskResumeAll+0x120>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d903      	bls.n	800438e <xTaskResumeAll+0x7a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <xTaskResumeAll+0x120>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a27      	ldr	r2, [pc, #156]	; (8004438 <xTaskResumeAll+0x124>)
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fe fe3a 	bl	800301e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <xTaskResumeAll+0x128>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <xTaskResumeAll+0x12c>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <xTaskResumeAll+0x11c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1cb      	bne.n	800435e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043cc:	f000 fb4c 	bl	8004a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043d0:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <xTaskResumeAll+0x130>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043dc:	f000 f846 	bl	800446c <xTaskIncrementTick>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <xTaskResumeAll+0x12c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f1      	bne.n	80043dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <xTaskResumeAll+0x130>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xTaskResumeAll+0x12c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xTaskResumeAll+0x134>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800441a:	f001 f98d 	bl	8005738 <vPortExitCritical>

	return xAlreadyYielded;
 800441e:	68bb      	ldr	r3, [r7, #8]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000be8 	.word	0x20000be8
 800442c:	20000bc0 	.word	0x20000bc0
 8004430:	20000b80 	.word	0x20000b80
 8004434:	20000bc8 	.word	0x20000bc8
 8004438:	200006f0 	.word	0x200006f0
 800443c:	200006ec 	.word	0x200006ec
 8004440:	20000bd4 	.word	0x20000bd4
 8004444:	20000bd0 	.word	0x20000bd0
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <xTaskGetTickCount+0x1c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004458:	687b      	ldr	r3, [r7, #4]
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000bc4 	.word	0x20000bc4

0800446c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b51      	ldr	r3, [pc, #324]	; (80045bc <xTaskIncrementTick+0x150>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 808d 	bne.w	800459a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004480:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <xTaskIncrementTick+0x154>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004488:	4a4d      	ldr	r2, [pc, #308]	; (80045c0 <xTaskIncrementTick+0x154>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d11f      	bne.n	80044d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004494:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <xTaskIncrementTick+0x158>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <xTaskIncrementTick+0x46>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	e7fe      	b.n	80044b0 <xTaskIncrementTick+0x44>
 80044b2:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <xTaskIncrementTick+0x15c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a41      	ldr	r2, [pc, #260]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <xTaskIncrementTick+0x15c>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <xTaskIncrementTick+0x160>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xTaskIncrementTick+0x160>)
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	f000 faca 	bl	8004a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044d4:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <xTaskIncrementTick+0x164>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d34e      	bcc.n	800457c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <xTaskIncrementTick+0x80>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <xTaskIncrementTick+0x82>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <xTaskIncrementTick+0x164>)
 80044f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f8:	601a      	str	r2, [r3, #0]
					break;
 80044fa:	e03f      	b.n	800457c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044fc:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <xTaskIncrementTick+0x158>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d203      	bcs.n	800451c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004514:	4a2e      	ldr	r2, [pc, #184]	; (80045d0 <xTaskIncrementTick+0x164>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6013      	str	r3, [r2, #0]
						break;
 800451a:	e02f      	b.n	800457c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe fdd9 	bl	80030d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3318      	adds	r3, #24
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fdd0 	bl	80030d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <xTaskIncrementTick+0x168>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d903      	bls.n	800454c <xTaskIncrementTick+0xe0>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <xTaskIncrementTick+0x168>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <xTaskIncrementTick+0x16c>)
 800455a:	441a      	add	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f7fe fd5b 	bl	800301e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <xTaskIncrementTick+0x170>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	429a      	cmp	r2, r3
 8004574:	d3b3      	bcc.n	80044de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800457a:	e7b0      	b.n	80044de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <xTaskIncrementTick+0x170>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004582:	4915      	ldr	r1, [pc, #84]	; (80045d8 <xTaskIncrementTick+0x16c>)
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d907      	bls.n	80045a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e004      	b.n	80045a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <xTaskIncrementTick+0x174>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <xTaskIncrementTick+0x174>)
 80045a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <xTaskIncrementTick+0x178>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045b0:	697b      	ldr	r3, [r7, #20]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000be8 	.word	0x20000be8
 80045c0:	20000bc4 	.word	0x20000bc4
 80045c4:	20000b78 	.word	0x20000b78
 80045c8:	20000b7c 	.word	0x20000b7c
 80045cc:	20000bd8 	.word	0x20000bd8
 80045d0:	20000be0 	.word	0x20000be0
 80045d4:	20000bc8 	.word	0x20000bc8
 80045d8:	200006f0 	.word	0x200006f0
 80045dc:	200006ec 	.word	0x200006ec
 80045e0:	20000bd0 	.word	0x20000bd0
 80045e4:	20000bd4 	.word	0x20000bd4

080045e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <vTaskSwitchContext+0xa4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <vTaskSwitchContext+0xa8>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045fc:	e040      	b.n	8004680 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <vTaskSwitchContext+0xa8>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004604:	4b23      	ldr	r3, [pc, #140]	; (8004694 <vTaskSwitchContext+0xac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e00f      	b.n	800462c <vTaskSwitchContext+0x44>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <vTaskSwitchContext+0x3e>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e7fe      	b.n	8004624 <vTaskSwitchContext+0x3c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b01      	subs	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	491a      	ldr	r1, [pc, #104]	; (8004698 <vTaskSwitchContext+0xb0>)
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0e5      	beq.n	800460c <vTaskSwitchContext+0x24>
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <vTaskSwitchContext+0xb0>)
 800464c:	4413      	add	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3308      	adds	r3, #8
 8004662:	429a      	cmp	r2, r3
 8004664:	d104      	bne.n	8004670 <vTaskSwitchContext+0x88>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <vTaskSwitchContext+0xb4>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4a06      	ldr	r2, [pc, #24]	; (8004694 <vTaskSwitchContext+0xac>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20000be8 	.word	0x20000be8
 8004690:	20000bd4 	.word	0x20000bd4
 8004694:	20000bc8 	.word	0x20000bc8
 8004698:	200006f0 	.word	0x200006f0
 800469c:	200006ec 	.word	0x200006ec

080046a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <vTaskPlaceOnEventList+0x24>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e7fe      	b.n	80046c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <vTaskPlaceOnEventList+0x44>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe fcca 	bl	8003066 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d2:	2101      	movs	r1, #1
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f000 fb7d 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200006ec 	.word	0x200006ec

080046e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <vTaskPlaceOnEventListRestricted+0x26>
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e7fe      	b.n	800470c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <vTaskPlaceOnEventListRestricted+0x50>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3318      	adds	r3, #24
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7fe fc81 	bl	800301e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004726:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f000 fb52 	bl	8004dd4 <prvAddCurrentTaskToDelayedList>
	}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	200006ec 	.word	0x200006ec

0800473c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <xTaskRemoveFromEventList+0x2a>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e7fe      	b.n	8004764 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fcb4 	bl	80030d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <xTaskRemoveFromEventList+0xac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11d      	bne.n	80047b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fcab 	bl	80030d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4b19      	ldr	r3, [pc, #100]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d903      	bls.n	8004796 <xTaskRemoveFromEventList+0x5a>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 80047a4:	441a      	add	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe fc36 	bl	800301e <vListInsertEnd>
 80047b2:	e005      	b.n	80047c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3318      	adds	r3, #24
 80047b8:	4619      	mov	r1, r3
 80047ba:	480e      	ldr	r0, [pc, #56]	; (80047f4 <xTaskRemoveFromEventList+0xb8>)
 80047bc:	f7fe fc2f 	bl	800301e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <xTaskRemoveFromEventList+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d905      	bls.n	80047da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <xTaskRemoveFromEventList+0xc0>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e001      	b.n	80047de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000be8 	.word	0x20000be8
 80047ec:	20000bc8 	.word	0x20000bc8
 80047f0:	200006f0 	.word	0x200006f0
 80047f4:	20000b80 	.word	0x20000b80
 80047f8:	200006ec 	.word	0x200006ec
 80047fc:	20000bd4 	.word	0x20000bd4

08004800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <vTaskInternalSetTimeOutState+0x24>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <vTaskInternalSetTimeOutState+0x28>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000bd8 	.word	0x20000bd8
 8004828:	20000bc4 	.word	0x20000bc4

0800482c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <xTaskCheckForTimeOut+0x24>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e7fe      	b.n	800484e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <xTaskCheckForTimeOut+0x3e>
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e7fe      	b.n	8004868 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800486a:	f000 ff37 	bl	80056dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <xTaskCheckForTimeOut+0xb8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004886:	d102      	bne.n	800488e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e023      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <xTaskCheckForTimeOut+0xbc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d007      	beq.n	80048aa <xTaskCheckForTimeOut+0x7e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e015      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d20b      	bcs.n	80048cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff9d 	bl	8004800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e004      	b.n	80048d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f000 ff2f 	bl	8005738 <vPortExitCritical>

	return xReturn;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000bc4 	.word	0x20000bc4
 80048e8:	20000bd8 	.word	0x20000bd8

080048ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <vTaskMissedYield+0x14>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000bd4 	.word	0x20000bd4

08004904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800490c:	f000 f852 	bl	80049b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <prvIdleTask+0x28>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d9f9      	bls.n	800490c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <prvIdleTask+0x2c>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004928:	e7f0      	b.n	800490c <prvIdleTask+0x8>
 800492a:	bf00      	nop
 800492c:	200006f0 	.word	0x200006f0
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e00c      	b.n	800495a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a12      	ldr	r2, [pc, #72]	; (8004994 <prvInitialiseTaskLists+0x60>)
 800494c:	4413      	add	r3, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fb38 	bl	8002fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b37      	cmp	r3, #55	; 0x37
 800495e:	d9ef      	bls.n	8004940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004960:	480d      	ldr	r0, [pc, #52]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004962:	f7fe fb2f 	bl	8002fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004966:	480d      	ldr	r0, [pc, #52]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004968:	f7fe fb2c 	bl	8002fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800496c:	480c      	ldr	r0, [pc, #48]	; (80049a0 <prvInitialiseTaskLists+0x6c>)
 800496e:	f7fe fb29 	bl	8002fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004972:	480c      	ldr	r0, [pc, #48]	; (80049a4 <prvInitialiseTaskLists+0x70>)
 8004974:	f7fe fb26 	bl	8002fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004978:	480b      	ldr	r0, [pc, #44]	; (80049a8 <prvInitialiseTaskLists+0x74>)
 800497a:	f7fe fb23 	bl	8002fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvInitialiseTaskLists+0x78>)
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <prvInitialiseTaskLists+0x64>)
 8004982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvInitialiseTaskLists+0x7c>)
 8004986:	4a05      	ldr	r2, [pc, #20]	; (800499c <prvInitialiseTaskLists+0x68>)
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	200006f0 	.word	0x200006f0
 8004998:	20000b50 	.word	0x20000b50
 800499c:	20000b64 	.word	0x20000b64
 80049a0:	20000b80 	.word	0x20000b80
 80049a4:	20000b94 	.word	0x20000b94
 80049a8:	20000bac 	.word	0x20000bac
 80049ac:	20000b78 	.word	0x20000b78
 80049b0:	20000b7c 	.word	0x20000b7c

080049b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ba:	e019      	b.n	80049f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049bc:	f000 fe8e 	bl	80056dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <prvCheckTasksWaitingTermination+0x4c>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fb83 	bl	80030d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049e6:	f000 fea7 	bl	8005738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f80e 	bl	8004a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e1      	bne.n	80049bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000b94 	.word	0x20000b94
 8004a04:	20000bc0 	.word	0x20000bc0
 8004a08:	20000ba8 	.word	0x20000ba8

08004a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f802 	bl	8005a2c <vPortFree>
				vPortFree( pxTCB );
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 ffff 	bl	8005a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a2e:	e017      	b.n	8004a60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d103      	bne.n	8004a42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fff6 	bl	8005a2c <vPortFree>
	}
 8004a40:	e00e      	b.n	8004a60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d009      	beq.n	8004a60 <prvDeleteTCB+0x54>
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e7fe      	b.n	8004a5e <prvDeleteTCB+0x52>
	}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <prvResetNextTaskUnblockTime+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <prvResetNextTaskUnblockTime+0x14>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <prvResetNextTaskUnblockTime+0x16>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <prvResetNextTaskUnblockTime+0x48>)
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a8a:	e008      	b.n	8004a9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <prvResetNextTaskUnblockTime+0x44>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <prvResetNextTaskUnblockTime+0x48>)
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000b78 	.word	0x20000b78
 8004ab0:	20000be0 	.word	0x20000be0

08004ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <xTaskGetSchedulerState+0x34>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	e008      	b.n	8004ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <xTaskGetSchedulerState+0x38>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	e001      	b.n	8004ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ada:	687b      	ldr	r3, [r7, #4]
	}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	20000bcc 	.word	0x20000bcc
 8004aec:	20000be8 	.word	0x20000be8

08004af0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d056      	beq.n	8004bb4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <xTaskPriorityInherit+0xd0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d246      	bcs.n	8004ba2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db06      	blt.n	8004b2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <xTaskPriorityInherit+0xd0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6959      	ldr	r1, [r3, #20]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <xTaskPriorityInherit+0xd4>)
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	d101      	bne.n	8004b46 <xTaskPriorityInherit+0x56>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xTaskPriorityInherit+0x58>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fe fac1 	bl	80030d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <xTaskPriorityInherit+0xd0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <xTaskPriorityInherit+0xd8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d903      	bls.n	8004b74 <xTaskPriorityInherit+0x84>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <xTaskPriorityInherit+0xd8>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <xTaskPriorityInherit+0xd4>)
 8004b82:	441a      	add	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7fe fa47 	bl	800301e <vListInsertEnd>
 8004b90:	e004      	b.n	8004b9c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <xTaskPriorityInherit+0xd0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e008      	b.n	8004bb4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <xTaskPriorityInherit+0xd0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d201      	bcs.n	8004bb4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200006ec 	.word	0x200006ec
 8004bc4:	200006f0 	.word	0x200006f0
 8004bc8:	20000bc8 	.word	0x20000bc8

08004bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d054      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004be2:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <xTaskPriorityDisinherit+0xcc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d009      	beq.n	8004c00 <xTaskPriorityDisinherit+0x34>
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e7fe      	b.n	8004bfe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <xTaskPriorityDisinherit+0x50>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	e7fe      	b.n	8004c1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d02c      	beq.n	8004c8c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d128      	bne.n	8004c8c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fa4a 	bl	80030d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <xTaskPriorityDisinherit+0xd0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <xTaskPriorityDisinherit+0xa0>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <xTaskPriorityDisinherit+0xd0>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <xTaskPriorityDisinherit+0xd4>)
 8004c7a:	441a      	add	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fe f9cb 	bl	800301e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c8c:	697b      	ldr	r3, [r7, #20]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200006ec 	.word	0x200006ec
 8004c9c:	20000bc8 	.word	0x20000bc8
 8004ca0:	200006f0 	.word	0x200006f0

08004ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d06d      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e7fe      	b.n	8004cd6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d902      	bls.n	8004ce8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e002      	b.n	8004cee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d04f      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d14a      	bne.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d02:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d109      	bne.n	8004d20 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	e7fe      	b.n	8004d1e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db04      	blt.n	8004d3e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d101      	bne.n	8004d58 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01c      	beq.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f9b8 	bl	80030d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4a06      	ldr	r2, [pc, #24]	; (8004da4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004d8a:	441a      	add	r2, r3
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fe f943 	bl	800301e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d98:	bf00      	nop
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200006ec 	.word	0x200006ec
 8004da4:	200006f0 	.word	0x200006f0
 8004da8:	20000bc8 	.word	0x20000bc8

08004dac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
	}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	200006ec 	.word	0x200006ec

08004dd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe f974 	bl	80030d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d10a      	bne.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4819      	ldr	r0, [pc, #100]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8004e08:	f7fe f909 	bl	800301e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e0c:	e026      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d209      	bcs.n	8004e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe f917 	bl	8003066 <vListInsert>
}
 8004e38:	e010      	b.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fe f90d 	bl	8003066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d202      	bcs.n	8004e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000bc4 	.word	0x20000bc4
 8004e68:	200006ec 	.word	0x200006ec
 8004e6c:	20000bac 	.word	0x20000bac
 8004e70:	20000b7c 	.word	0x20000b7c
 8004e74:	20000b78 	.word	0x20000b78
 8004e78:	20000be0 	.word	0x20000be0

08004e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e86:	f000 fac3 	bl	8005410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <xTimerCreateTimerTask+0x80>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d021      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e9a:	1d3a      	adds	r2, r7, #4
 8004e9c:	f107 0108 	add.w	r1, r7, #8
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe f873 	bl	8002f90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	9202      	str	r2, [sp, #8]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	460a      	mov	r2, r1
 8004ebc:	4910      	ldr	r1, [pc, #64]	; (8004f00 <xTimerCreateTimerTask+0x84>)
 8004ebe:	4811      	ldr	r0, [pc, #68]	; (8004f04 <xTimerCreateTimerTask+0x88>)
 8004ec0:	f7fe ffee 	bl	8003ea0 <xTaskCreateStatic>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <xTimerCreateTimerTask+0x8c>)
 8004ec8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <xTimerCreateTimerTask+0x8c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <xTimerCreateTimerTask+0x74>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	e7fe      	b.n	8004eee <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004ef0:	697b      	ldr	r3, [r7, #20]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000c1c 	.word	0x20000c1c
 8004f00:	0800640c 	.word	0x0800640c
 8004f04:	08005025 	.word	0x08005025
 8004f08:	20000c20 	.word	0x20000c20

08004f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xTimerGenericCommand+0x2c>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e7fe      	b.n	8004f36 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <xTimerGenericCommand+0x94>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02a      	beq.n	8004f96 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	dc18      	bgt.n	8004f84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f52:	f7ff fdaf 	bl	8004ab4 <xTaskGetSchedulerState>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d109      	bne.n	8004f70 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <xTimerGenericCommand+0x94>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	f107 0110 	add.w	r1, r7, #16
 8004f64:	2300      	movs	r3, #0
 8004f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f68:	f7fe fa1a 	bl	80033a0 <xQueueGenericSend>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24
 8004f6e:	e012      	b.n	8004f96 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <xTimerGenericCommand+0x94>)
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	f107 0110 	add.w	r1, r7, #16
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f7fe fa10 	bl	80033a0 <xQueueGenericSend>
 8004f80:	6278      	str	r0, [r7, #36]	; 0x24
 8004f82:	e008      	b.n	8004f96 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <xTimerGenericCommand+0x94>)
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	f107 0110 	add.w	r1, r7, #16
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	f7fe fb00 	bl	8003594 <xQueueGenericSendFromISR>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000c1c 	.word	0x20000c1c

08004fa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fae:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <prvProcessExpiredTimer+0x7c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe f88b 	bl	80030d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d121      	bne.n	800500e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	18d1      	adds	r1, r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	6978      	ldr	r0, [r7, #20]
 8004fd8:	f000 f8c8 	bl	800516c <prvInsertTimerInActiveList>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	2100      	movs	r1, #0
 8004fec:	6978      	ldr	r0, [r7, #20]
 8004fee:	f7ff ff8d 	bl	8004f0c <xTimerGenericCommand>
 8004ff2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <prvProcessExpiredTimer+0x6a>
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e7fe      	b.n	800500c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	4798      	blx	r3
}
 8005016:	bf00      	nop
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000c14 	.word	0x20000c14

08005024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	4618      	mov	r0, r3
 8005032:	f000 f857 	bl	80050e4 <prvGetNextExpireTime>
 8005036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4619      	mov	r1, r3
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f803 	bl	8005048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005042:	f000 f8d5 	bl	80051f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005046:	e7f1      	b.n	800502c <prvTimerTask+0x8>

08005048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005052:	f7ff f951 	bl	80042f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f866 	bl	800512c <prvSampleTimeNow>
 8005060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d130      	bne.n	80050ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <prvProcessTimerOrBlockTask+0x3c>
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	429a      	cmp	r2, r3
 8005074:	d806      	bhi.n	8005084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005076:	f7ff f94d 	bl	8004314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff91 	bl	8004fa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005082:	e024      	b.n	80050ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800508a:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <prvProcessTimerOrBlockTask+0x90>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf0c      	ite	eq
 8005094:	2301      	moveq	r3, #1
 8005096:	2300      	movne	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <prvProcessTimerOrBlockTask+0x94>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f7fe fec5 	bl	8003e38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050ae:	f7ff f931 	bl	8004314 <xTaskResumeAll>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <prvProcessTimerOrBlockTask+0x98>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
}
 80050c8:	e001      	b.n	80050ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050ca:	f7ff f923 	bl	8004314 <xTaskResumeAll>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000c18 	.word	0x20000c18
 80050dc:	20000c1c 	.word	0x20000c1c
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <prvGetNextExpireTime+0x44>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <prvGetNextExpireTime+0x44>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e001      	b.n	800511a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800511a:	68fb      	ldr	r3, [r7, #12]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20000c14 	.word	0x20000c14

0800512c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005134:	f7ff f98a 	bl	800444c <xTaskGetTickCount>
 8005138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvSampleTimeNow+0x3c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	429a      	cmp	r2, r3
 8005142:	d205      	bcs.n	8005150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005144:	f000 f904 	bl	8005350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e002      	b.n	8005156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <prvSampleTimeNow+0x3c>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000c24 	.word	0x20000c24

0800516c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d812      	bhi.n	80051b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e01b      	b.n	80051de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <prvInsertTimerInActiveList+0x7c>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fd ff58 	bl	8003066 <vListInsert>
 80051b6:	e012      	b.n	80051de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d206      	bcs.n	80051ce <prvInsertTimerInActiveList+0x62>
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e007      	b.n	80051de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <prvInsertTimerInActiveList+0x80>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	4610      	mov	r0, r2
 80051da:	f7fd ff44 	bl	8003066 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000c18 	.word	0x20000c18
 80051ec:	20000c14 	.word	0x20000c14

080051f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051f6:	e099      	b.n	800532c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da17      	bge.n	800522e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	3304      	adds	r3, #4
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <prvProcessReceivedCommands+0x2e>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	e7fe      	b.n	800521c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	6850      	ldr	r0, [r2, #4]
 8005226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005228:	6892      	ldr	r2, [r2, #8]
 800522a:	4611      	mov	r1, r2
 800522c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db7a      	blt.n	800532a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fd ff47 	bl	80030d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800524a:	463b      	mov	r3, r7
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff6d 	bl	800512c <prvSampleTimeNow>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b09      	cmp	r3, #9
 8005258:	d868      	bhi.n	800532c <prvProcessReceivedCommands+0x13c>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <prvProcessReceivedCommands+0x70>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005289 	.word	0x08005289
 8005264:	08005289 	.word	0x08005289
 8005268:	08005289 	.word	0x08005289
 800526c:	0800532d 	.word	0x0800532d
 8005270:	080052e3 	.word	0x080052e3
 8005274:	08005319 	.word	0x08005319
 8005278:	08005289 	.word	0x08005289
 800527c:	08005289 	.word	0x08005289
 8005280:	0800532d 	.word	0x0800532d
 8005284:	080052e3 	.word	0x080052e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	18d1      	adds	r1, r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005296:	f7ff ff69 	bl	800516c <prvInsertTimerInActiveList>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d045      	beq.n	800532c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d13d      	bne.n	800532c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	441a      	add	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2300      	movs	r3, #0
 80052be:	2100      	movs	r1, #0
 80052c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c2:	f7ff fe23 	bl	8004f0c <xTimerGenericCommand>
 80052c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d12e      	bne.n	800532c <prvProcessReceivedCommands+0x13c>
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	e7fe      	b.n	80052e0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <prvProcessReceivedCommands+0x114>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e7fe      	b.n	8005302 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	18d1      	adds	r1, r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005312:	f7ff ff2b 	bl	800516c <prvInsertTimerInActiveList>
					break;
 8005316:	e009      	b.n	800532c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005324:	f000 fb82 	bl	8005a2c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005328:	e000      	b.n	800532c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800532a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <prvProcessReceivedCommands+0x15c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1d39      	adds	r1, r7, #4
 8005332:	2200      	movs	r2, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fa4b 	bl	80037d0 <xQueueReceive>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f af5b 	bne.w	80051f8 <prvProcessReceivedCommands+0x8>
	}
}
 8005342:	bf00      	nop
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000c1c 	.word	0x20000c1c

08005350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005356:	e044      	b.n	80053e2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005358:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <prvSwitchTimerLists+0xb8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005362:	4b29      	ldr	r3, [pc, #164]	; (8005408 <prvSwitchTimerLists+0xb8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd feb1 	bl	80030d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d12d      	bne.n	80053e2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d90e      	bls.n	80053b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <prvSwitchTimerLists+0xb8>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7fd fe59 	bl	8003066 <vListInsert>
 80053b4:	e015      	b.n	80053e2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053b6:	2300      	movs	r3, #0
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	2100      	movs	r1, #0
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fda3 	bl	8004f0c <xTimerGenericCommand>
 80053c6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <prvSwitchTimerLists+0x92>
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	e7fe      	b.n	80053e0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <prvSwitchTimerLists+0xb8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1b5      	bne.n	8005358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <prvSwitchTimerLists+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <prvSwitchTimerLists+0xb8>)
 80053f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	6013      	str	r3, [r2, #0]
}
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000c14 	.word	0x20000c14
 800540c:	20000c18 	.word	0x20000c18

08005410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005416:	f000 f961 	bl	80056dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <prvCheckForValidListAndQueue+0x60>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d120      	bne.n	8005464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005422:	4814      	ldr	r0, [pc, #80]	; (8005474 <prvCheckForValidListAndQueue+0x64>)
 8005424:	f7fd fdce 	bl	8002fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005428:	4813      	ldr	r0, [pc, #76]	; (8005478 <prvCheckForValidListAndQueue+0x68>)
 800542a:	f7fd fdcb 	bl	8002fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <prvCheckForValidListAndQueue+0x6c>)
 8005430:	4a10      	ldr	r2, [pc, #64]	; (8005474 <prvCheckForValidListAndQueue+0x64>)
 8005432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005434:	4b12      	ldr	r3, [pc, #72]	; (8005480 <prvCheckForValidListAndQueue+0x70>)
 8005436:	4a10      	ldr	r2, [pc, #64]	; (8005478 <prvCheckForValidListAndQueue+0x68>)
 8005438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800543a:	2300      	movs	r3, #0
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <prvCheckForValidListAndQueue+0x74>)
 8005440:	4a11      	ldr	r2, [pc, #68]	; (8005488 <prvCheckForValidListAndQueue+0x78>)
 8005442:	2110      	movs	r1, #16
 8005444:	200a      	movs	r0, #10
 8005446:	f7fd fed9 	bl	80031fc <xQueueGenericCreateStatic>
 800544a:	4602      	mov	r2, r0
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <prvCheckForValidListAndQueue+0x60>)
 800544e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <prvCheckForValidListAndQueue+0x60>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <prvCheckForValidListAndQueue+0x60>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	490b      	ldr	r1, [pc, #44]	; (800548c <prvCheckForValidListAndQueue+0x7c>)
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fcc2 	bl	8003de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005464:	f000 f968 	bl	8005738 <vPortExitCritical>
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000c1c 	.word	0x20000c1c
 8005474:	20000bec 	.word	0x20000bec
 8005478:	20000c00 	.word	0x20000c00
 800547c:	20000c14 	.word	0x20000c14
 8005480:	20000c18 	.word	0x20000c18
 8005484:	20000cc8 	.word	0x20000cc8
 8005488:	20000c28 	.word	0x20000c28
 800548c:	08006414 	.word	0x08006414

08005490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3b04      	subs	r3, #4
 80054a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3b04      	subs	r3, #4
 80054ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f023 0201 	bic.w	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b04      	subs	r3, #4
 80054be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054c0:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <pxPortInitialiseStack+0x64>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b14      	subs	r3, #20
 80054ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3b04      	subs	r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f06f 0202 	mvn.w	r2, #2
 80054de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b20      	subs	r3, #32
 80054e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054e6:	68fb      	ldr	r3, [r7, #12]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	080054f9 	.word	0x080054f9

080054f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <prvTaskExitError+0x50>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550a:	d009      	beq.n	8005520 <prvTaskExitError+0x28>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e7fe      	b.n	800551e <prvTaskExitError+0x26>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005532:	bf00      	nop
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0fc      	beq.n	8005534 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000000c 	.word	0x2000000c
 800554c:	00000000 	.word	0x00000000

08005550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <pxCurrentTCBConst2>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	f380 8809 	msr	PSP, r0
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	4770      	bx	lr
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst2>:
 8005570:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005578:	4808      	ldr	r0, [pc, #32]	; (800559c <prvPortStartFirstTask+0x24>)
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f380 8808 	msr	MSP, r0
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8814 	msr	CONTROL, r0
 800558a:	b662      	cpsie	i
 800558c:	b661      	cpsie	f
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	df00      	svc	0
 8005598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800559a:	bf00      	nop
 800559c:	e000ed08 	.word	0xe000ed08

080055a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055a6:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <xPortStartScheduler+0x118>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a44      	ldr	r2, [pc, #272]	; (80056bc <xPortStartScheduler+0x11c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d109      	bne.n	80055c4 <xPortStartScheduler+0x24>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e7fe      	b.n	80055c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055c4:	4b3c      	ldr	r3, [pc, #240]	; (80056b8 <xPortStartScheduler+0x118>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a3d      	ldr	r2, [pc, #244]	; (80056c0 <xPortStartScheduler+0x120>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d109      	bne.n	80055e2 <xPortStartScheduler+0x42>
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e7fe      	b.n	80055e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <xPortStartScheduler+0x124>)
 80055e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	22ff      	movs	r2, #255	; 0xff
 80055f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <xPortStartScheduler+0x128>)
 8005608:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800560a:	4b30      	ldr	r3, [pc, #192]	; (80056cc <xPortStartScheduler+0x12c>)
 800560c:	2207      	movs	r2, #7
 800560e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005610:	e009      	b.n	8005626 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <xPortStartScheduler+0x12c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3b01      	subs	r3, #1
 8005618:	4a2c      	ldr	r2, [pc, #176]	; (80056cc <xPortStartScheduler+0x12c>)
 800561a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d0ef      	beq.n	8005612 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <xPortStartScheduler+0x12c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1c3 0307 	rsb	r3, r3, #7
 800563a:	2b04      	cmp	r3, #4
 800563c:	d009      	beq.n	8005652 <xPortStartScheduler+0xb2>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	e7fe      	b.n	8005650 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <xPortStartScheduler+0x12c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <xPortStartScheduler+0x12c>)
 800565a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <xPortStartScheduler+0x12c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <xPortStartScheduler+0x12c>)
 8005666:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <xPortStartScheduler+0x130>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <xPortStartScheduler+0x130>)
 8005676:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800567a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <xPortStartScheduler+0x130>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <xPortStartScheduler+0x130>)
 8005682:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005686:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005688:	f000 f8d6 	bl	8005838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <xPortStartScheduler+0x134>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005692:	f000 f8f5 	bl	8005880 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <xPortStartScheduler+0x138>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0f      	ldr	r2, [pc, #60]	; (80056d8 <xPortStartScheduler+0x138>)
 800569c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056a2:	f7ff ff69 	bl	8005578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056a6:	f7fe ff9f 	bl	80045e8 <vTaskSwitchContext>
	prvTaskExitError();
 80056aa:	f7ff ff25 	bl	80054f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed00 	.word	0xe000ed00
 80056bc:	410fc271 	.word	0x410fc271
 80056c0:	410fc270 	.word	0x410fc270
 80056c4:	e000e400 	.word	0xe000e400
 80056c8:	20000d18 	.word	0x20000d18
 80056cc:	20000d1c 	.word	0x20000d1c
 80056d0:	e000ed20 	.word	0xe000ed20
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	e000ef34 	.word	0xe000ef34

080056dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <vPortEnterCritical+0x54>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <vPortEnterCritical+0x54>)
 80056fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056fe:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <vPortEnterCritical+0x54>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10e      	bne.n	8005724 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <vPortEnterCritical+0x58>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <vPortEnterCritical+0x48>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	e7fe      	b.n	8005722 <vPortEnterCritical+0x46>
	}
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	2000000c 	.word	0x2000000c
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <vPortExitCritical+0x4c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <vPortExitCritical+0x22>
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	e7fe      	b.n	8005758 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <vPortExitCritical+0x4c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <vPortExitCritical+0x4c>)
 8005762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <vPortExitCritical+0x4c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <vPortExitCritical+0x3e>
 800576c:	2300      	movs	r3, #0
 800576e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
	...

08005790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005790:	f3ef 8009 	mrs	r0, PSP
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <pxCurrentTCBConst>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	f01e 0f10 	tst.w	lr, #16
 80057a0:	bf08      	it	eq
 80057a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	6010      	str	r0, [r2, #0]
 80057ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057b4:	f380 8811 	msr	BASEPRI, r0
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f7fe ff12 	bl	80045e8 <vTaskSwitchContext>
 80057c4:	f04f 0000 	mov.w	r0, #0
 80057c8:	f380 8811 	msr	BASEPRI, r0
 80057cc:	bc09      	pop	{r0, r3}
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	6808      	ldr	r0, [r1, #0]
 80057d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d6:	f01e 0f10 	tst.w	lr, #16
 80057da:	bf08      	it	eq
 80057dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057e0:	f380 8809 	msr	PSP, r0
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst>:
 80057f0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005810:	f7fe fe2c 	bl	800446c <xTaskIncrementTick>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <xPortSysTickHandler+0x3c>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <vPortSetupTimerInterrupt+0x34>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <vPortSetupTimerInterrupt+0x38>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <vPortSetupTimerInterrupt+0x3c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <vPortSetupTimerInterrupt+0x40>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	099b      	lsrs	r3, r3, #6
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <vPortSetupTimerInterrupt+0x44>)
 8005856:	3b01      	subs	r3, #1
 8005858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <vPortSetupTimerInterrupt+0x34>)
 800585c:	2207      	movs	r2, #7
 800585e:	601a      	str	r2, [r3, #0]
}
 8005860:	bf00      	nop
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	e000e010 	.word	0xe000e010
 8005870:	e000e018 	.word	0xe000e018
 8005874:	20000000 	.word	0x20000000
 8005878:	10624dd3 	.word	0x10624dd3
 800587c:	e000e014 	.word	0xe000e014

08005880 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005880:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005890 <vPortEnableVFP+0x10>
 8005884:	6801      	ldr	r1, [r0, #0]
 8005886:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800588a:	6001      	str	r1, [r0, #0]
 800588c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800588e:	bf00      	nop
 8005890:	e000ed88 	.word	0xe000ed88

08005894 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800589a:	f3ef 8305 	mrs	r3, IPSR
 800589e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d913      	bls.n	80058ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058a6:	4a16      	ldr	r2, [pc, #88]	; (8005900 <vPortValidateInterruptPriority+0x6c>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <vPortValidateInterruptPriority+0x70>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	7afa      	ldrb	r2, [r7, #11]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d209      	bcs.n	80058ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e7fe      	b.n	80058cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058ce:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <vPortValidateInterruptPriority+0x74>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <vPortValidateInterruptPriority+0x78>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d909      	bls.n	80058f2 <vPortValidateInterruptPriority+0x5e>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	e7fe      	b.n	80058f0 <vPortValidateInterruptPriority+0x5c>
	}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000e3f0 	.word	0xe000e3f0
 8005904:	20000d18 	.word	0x20000d18
 8005908:	e000ed0c 	.word	0xe000ed0c
 800590c:	20000d1c 	.word	0x20000d1c

08005910 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800591c:	f7fe fcec 	bl	80042f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8005920:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <pvPortMalloc+0x10c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d104      	bne.n	8005932 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8005928:	f000 f8ba 	bl	8005aa0 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800592c:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <pvPortMalloc+0x10c>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8005938:	2308      	movs	r3, #8
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	3308      	adds	r3, #8
 8005954:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d057      	beq.n	8005a0c <pvPortMalloc+0xfc>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f640 42db 	movw	r2, #3291	; 0xcdb
 8005962:	4293      	cmp	r3, r2
 8005964:	d852      	bhi.n	8005a0c <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <pvPortMalloc+0x110>)
 8005968:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <pvPortMalloc+0x110>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005970:	e004      	b.n	800597c <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d903      	bls.n	800598e <pvPortMalloc+0x7e>
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f1      	bne.n	8005972 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <pvPortMalloc+0x114>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03a      	beq.n	8005a0c <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2208      	movs	r2, #8
 800599c:	4413      	add	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2208      	movs	r2, #8
 80059b2:	0052      	lsls	r2, r2, #1
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d922      	bls.n	80059fe <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1ad2      	subs	r2, r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <pvPortMalloc+0x110>)
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e002      	b.n	80059e4 <pvPortMalloc+0xd4>
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d8f6      	bhi.n	80059de <pvPortMalloc+0xce>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <pvPortMalloc+0x118>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <pvPortMalloc+0x118>)
 8005a0a:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a0c:	f7fe fc82 	bl	8004314 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8005a10:	697b      	ldr	r3, [r7, #20]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20001a14 	.word	0x20001a14
 8005a20:	20001a04 	.word	0x20001a04
 8005a24:	20001a0c 	.word	0x20001a0c
 8005a28:	20000010 	.word	0x20000010

08005a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d027      	beq.n	8005a8e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8005a3e:	2308      	movs	r3, #8
 8005a40:	425b      	negs	r3, r3
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4413      	add	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8005a4c:	f7fe fc54 	bl	80042f8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <vPortFree+0x6c>)
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e002      	b.n	8005a62 <vPortFree+0x36>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d8f6      	bhi.n	8005a5c <vPortFree+0x30>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <vPortFree+0x70>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4413      	add	r3, r2
 8005a86:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <vPortFree+0x70>)
 8005a88:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8005a8a:	f7fe fc43 	bl	8004314 <xTaskResumeAll>
	}
}
 8005a8e:	bf00      	nop
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20001a04 	.word	0x20001a04
 8005a9c:	20000010 	.word	0x20000010

08005aa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <prvHeapInit+0x48>)
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <prvHeapInit+0x4c>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <prvHeapInit+0x4c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <prvHeapInit+0x50>)
 8005abc:	f640 42dc 	movw	r2, #3292	; 0xcdc
 8005ac0:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <prvHeapInit+0x50>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f640 42dc 	movw	r2, #3292	; 0xcdc
 8005ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4a06      	ldr	r2, [pc, #24]	; (8005af0 <prvHeapInit+0x50>)
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000d28 	.word	0x20000d28
 8005aec:	20001a04 	.word	0x20001a04
 8005af0:	20001a0c 	.word	0x20001a0c

08005af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005afa:	e003      	b.n	8005b04 <LoopCopyDataInit>

08005afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b02:	3104      	adds	r1, #4

08005b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b04:	480b      	ldr	r0, [pc, #44]	; (8005b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b0c:	d3f6      	bcc.n	8005afc <CopyDataInit>
  ldr  r2, =_sbss
 8005b0e:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b10:	e002      	b.n	8005b18 <LoopFillZerobss>

08005b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b14:	f842 3b04 	str.w	r3, [r2], #4

08005b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b1c:	d3f9      	bcc.n	8005b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b1e:	f7fa fead 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b22:	f000 fc2b 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b26:	f000 f815 	bl	8005b54 <main>
  bx  lr    
 8005b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005b30:	08006490 	.word	0x08006490
  ldr  r0, =_sdata
 8005b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b38:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8005b3c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8005b40:	20001ba0 	.word	0x20001ba0

08005b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b44:	e7fe      	b.n	8005b44 <ADC_IRQHandler>

08005b46 <finalizeHardwareInit>:
void finalizeHardwareInit(){}
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b09c      	sub	sp, #112	; 0x70
 8005b58:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b5a:	f7fa fec5 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b5e:	f000 f88b 	bl	8005c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b62:	f000 fa09 	bl	8005f78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005b66:	f000 f903 	bl	8005d70 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005b6a:	f000 f92f 	bl	8005dcc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8005b6e:	f000 f9d9 	bl	8005f24 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8005b72:	f000 f961 	bl	8005e38 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005b76:	f000 f8e7 	bl	8005d48 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xLEDSemaphore=xSemaphoreCreateBinary();  //on initialise à 0 le sémaphore
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	2001      	movs	r0, #1
 8005b80:	f7fd fbae 	bl	80032e0 <xQueueGenericCreate>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <main+0xf4>)
 8005b88:	601a      	str	r2, [r3, #0]
  xSemaphore=xSemaphoreCreateBinary();
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f7fd fba6 	bl	80032e0 <xQueueGenericCreate>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <main+0xf8>)
 8005b98:	601a      	str	r2, [r3, #0]

  xQueue1=xQueueCreate(4,STACK_SIZE);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ba0:	2004      	movs	r0, #4
 8005ba2:	f7fd fb9d 	bl	80032e0 <xQueueGenericCreate>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <main+0xfc>)
 8005baa:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  osKernelInitialize();
 8005bac:	f7fd f896 	bl	8002cdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8005bb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005bb4:	2224      	movs	r2, #36	; 0x24
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fc0e 	bl	80063da <memset>
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <main+0x100>)
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8005bc8:	2318      	movs	r3, #24
 8005bca:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = STACK_SIZE
  };
  const osThreadAttr_t secondTask_attributes = {
 8005bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd0:	2224      	movs	r2, #36	; 0x24
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fc00 	bl	80063da <memset>
 8005bda:	4b1f      	ldr	r3, [pc, #124]	; (8005c58 <main+0x104>)
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be4:	2318      	movs	r3, #24
 8005be6:	643b      	str	r3, [r7, #64]	; 0x40
      .name = "secondTask",
      .priority = (osPriority_t) osPriorityNormal, 	//On met priorité normale car ça sera gérer par des interuption, et les intérruptions sont plus prio
      .stack_size = STACK_SIZE
    };
  const osThreadAttr_t ThirdTask_attributes = {
 8005be8:	1d3b      	adds	r3, r7, #4
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fbf3 	bl	80063da <memset>
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <main+0x108>)
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	2308      	movs	r3, #8
 8005c00:	61fb      	str	r3, [r7, #28]
        .name = "thirdTask",
        .priority = (osPriority_t) osPriorityLow, //car tâche de fond, lente qui est pour gérer
        .stack_size = STACK_SIZE
      };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005c02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005c06:	461a      	mov	r2, r3
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4815      	ldr	r0, [pc, #84]	; (8005c60 <main+0x10c>)
 8005c0c:	f7fd f8ce 	bl	8002dac <osThreadNew>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <main+0x110>)
 8005c14:	601a      	str	r2, [r3, #0]
  secondTaskHandle = osThreadNew(StartSecondTask, NULL, &secondTask_attributes);
 8005c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4812      	ldr	r0, [pc, #72]	; (8005c68 <main+0x114>)
 8005c20:	f7fd f8c4 	bl	8002dac <osThreadNew>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <main+0x118>)
 8005c28:	601a      	str	r2, [r3, #0]
  thirdTaskHandle = osThreadNew(StartThirdTask, NULL, &ThirdTask_attributes);
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2100      	movs	r1, #0
 8005c30:	480f      	ldr	r0, [pc, #60]	; (8005c70 <main+0x11c>)
 8005c32:	f7fd f8bb 	bl	8002dac <osThreadNew>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <main+0x120>)
 8005c3a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  finalizeHardwareInit();
 8005c3c:	f7ff ff83 	bl	8005b46 <finalizeHardwareInit>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();   //
 8005c40:	f7fd f880 	bl	8002d44 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005c44:	e7fe      	b.n	8005c44 <main+0xf0>
 8005c46:	bf00      	nop
 8005c48:	20001b9c 	.word	0x20001b9c
 8005c4c:	20001ab8 	.word	0x20001ab8
 8005c50:	20001b98 	.word	0x20001b98
 8005c54:	0800641c 	.word	0x0800641c
 8005c58:	08006428 	.word	0x08006428
 8005c5c:	08006434 	.word	0x08006434
 8005c60:	08006219 	.word	0x08006219
 8005c64:	20001a60 	.word	0x20001a60
 8005c68:	08006245 	.word	0x08006245
 8005c6c:	20001a5c 	.word	0x20001a5c
 8005c70:	08006281 	.word	0x08006281
 8005c74:	20001afc 	.word	0x20001afc

08005c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b094      	sub	sp, #80	; 0x50
 8005c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c7e:	f107 0320 	add.w	r3, r7, #32
 8005c82:	2230      	movs	r2, #48	; 0x30
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fba7 	bl	80063da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <SystemClock_Config+0xc8>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	4a26      	ldr	r2, [pc, #152]	; (8005d40 <SystemClock_Config+0xc8>)
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005caa:	6413      	str	r3, [r2, #64]	; 0x40
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <SystemClock_Config+0xc8>)
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	607b      	str	r3, [r7, #4]
 8005cbc:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <SystemClock_Config+0xcc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	; (8005d44 <SystemClock_Config+0xcc>)
 8005cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <SystemClock_Config+0xcc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005cd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005ce8:	2304      	movs	r3, #4
 8005cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005cec:	23c0      	movs	r3, #192	; 0xc0
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cf8:	f107 0320 	add.w	r3, r7, #32
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fb fa6d 	bl	80011dc <HAL_RCC_OscConfig>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005d08:	f000 fb30 	bl	800636c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d0c:	230f      	movs	r3, #15
 8005d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d10:	2302      	movs	r3, #2
 8005d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	2103      	movs	r1, #3
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fb fc99 	bl	8001660 <HAL_RCC_ClockConfig>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005d34:	f000 fb1a 	bl	800636c <Error_Handler>
  }
}
 8005d38:	bf00      	nop
 8005d3a:	3750      	adds	r7, #80	; 0x50
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40007000 	.word	0x40007000

08005d48 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 12, 0);
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	210c      	movs	r1, #12
 8005d50:	2007      	movs	r0, #7
 8005d52:	f7fa ff16 	bl	8000b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005d56:	2007      	movs	r0, #7
 8005d58:	f7fa ff2f 	bl	8000bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 12, 0);   //On utilise que cette interruption, priorité = 12
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	210c      	movs	r1, #12
 8005d60:	2006      	movs	r0, #6
 8005d62:	f7fa ff0e 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005d66:	2006      	movs	r0, #6
 8005d68:	f7fa ff27 	bl	8000bba <HAL_NVIC_EnableIRQ>

}
 8005d6c:	bf00      	nop
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d76:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <MX_I2C1_Init+0x54>)
 8005d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <MX_I2C1_Init+0x58>)
 8005d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005dac:	4804      	ldr	r0, [pc, #16]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005dae:	f7fb f8ed 	bl	8000f8c <HAL_I2C_Init>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005db8:	f000 fad8 	bl	800636c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20001a64 	.word	0x20001a64
 8005dc4:	40005400 	.word	0x40005400
 8005dc8:	000186a0 	.word	0x000186a0

08005dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005dd0:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005dd2:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <MX_SPI1_Init+0x68>)
 8005dd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005dd6:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005ddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005de4:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e18:	220a      	movs	r2, #10
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e1c:	4804      	ldr	r0, [pc, #16]	; (8005e30 <MX_SPI1_Init+0x64>)
 8005e1e:	f7fb fe0d 	bl	8001a3c <HAL_SPI_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005e28:	f000 faa0 	bl	800636c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20001b40 	.word	0x20001b40
 8005e34:	40013000 	.word	0x40013000

08005e38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	; 0x38
 8005e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e4c:	f107 0320 	add.w	r3, r7, #32
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e56:	1d3b      	adds	r3, r7, #4
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	611a      	str	r2, [r3, #16]
 8005e64:	615a      	str	r2, [r3, #20]
 8005e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e68:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e6a:	4a2d      	ldr	r2, [pc, #180]	; (8005f20 <MX_TIM3_Init+0xe8>)
 8005e6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96;
 8005e6e:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e70:	2260      	movs	r2, #96	; 0x60
 8005e72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005e7a:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e8e:	4823      	ldr	r0, [pc, #140]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005e90:	f7fb fe38 	bl	8001b04 <HAL_TIM_Base_Init>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005e9a:	f000 fa67 	bl	800636c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	481c      	ldr	r0, [pc, #112]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005eac:	f7fb fff2 	bl	8001e94 <HAL_TIM_ConfigClockSource>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005eb6:	f000 fa59 	bl	800636c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8005eba:	4818      	ldr	r0, [pc, #96]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005ebc:	f7fb fe4d 	bl	8001b5a <HAL_TIM_OC_Init>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005ec6:	f000 fa51 	bl	800636c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005eca:	2320      	movs	r3, #32
 8005ecc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ed2:	f107 0320 	add.w	r3, r7, #32
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4810      	ldr	r0, [pc, #64]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005eda:	f7fc fb6b 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005ee4:	f000 fa42 	bl	800636c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8005eec:	2305      	movs	r3, #5
 8005eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	2200      	movs	r2, #0
 8005efc:	4619      	mov	r1, r3
 8005efe:	4807      	ldr	r0, [pc, #28]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005f00:	f7fb ff68 	bl	8001dd4 <HAL_TIM_OC_ConfigChannel>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005f0a:	f000 fa2f 	bl	800636c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005f0e:	4803      	ldr	r0, [pc, #12]	; (8005f1c <MX_TIM3_Init+0xe4>)
 8005f10:	f7fa fbd2 	bl	80006b8 <HAL_TIM_MspPostInit>

}
 8005f14:	bf00      	nop
 8005f16:	3738      	adds	r7, #56	; 0x38
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20001abc 	.word	0x20001abc
 8005f20:	40000400 	.word	0x40000400

08005f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <MX_USART1_UART_Init+0x50>)
 8005f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f36:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f4a:	220c      	movs	r2, #12
 8005f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f5a:	4805      	ldr	r0, [pc, #20]	; (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f5c:	f7fc fb83 	bl	8002666 <HAL_UART_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f66:	f000 fa01 	bl	800636c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20001b00 	.word	0x20001b00
 8005f74:	40011000 	.word	0x40011000

08005f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f7e:	f107 031c 	add.w	r3, r7, #28
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	4b99      	ldr	r3, [pc, #612]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4a98      	ldr	r2, [pc, #608]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005f98:	f043 0310 	orr.w	r3, r3, #16
 8005f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9e:	4b96      	ldr	r3, [pc, #600]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	4b92      	ldr	r3, [pc, #584]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	4a91      	ldr	r2, [pc, #580]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fba:	4b8f      	ldr	r3, [pc, #572]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	4b8b      	ldr	r3, [pc, #556]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a8a      	ldr	r2, [pc, #552]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b88      	ldr	r3, [pc, #544]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	4b84      	ldr	r3, [pc, #528]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	4a83      	ldr	r2, [pc, #524]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff2:	4b81      	ldr	r3, [pc, #516]	; (80061f8 <MX_GPIO_Init+0x280>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	4b7d      	ldr	r3, [pc, #500]	; (80061f8 <MX_GPIO_Init+0x280>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	4a7c      	ldr	r2, [pc, #496]	; (80061f8 <MX_GPIO_Init+0x280>)
 8006008:	f043 0302 	orr.w	r3, r3, #2
 800600c:	6313      	str	r3, [r2, #48]	; 0x30
 800600e:	4b7a      	ldr	r3, [pc, #488]	; (80061f8 <MX_GPIO_Init+0x280>)
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	4b76      	ldr	r3, [pc, #472]	; (80061f8 <MX_GPIO_Init+0x280>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	4a75      	ldr	r2, [pc, #468]	; (80061f8 <MX_GPIO_Init+0x280>)
 8006024:	f043 0308 	orr.w	r3, r3, #8
 8006028:	6313      	str	r3, [r2, #48]	; 0x30
 800602a:	4b73      	ldr	r3, [pc, #460]	; (80061f8 <MX_GPIO_Init+0x280>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8006036:	2200      	movs	r2, #0
 8006038:	2108      	movs	r1, #8
 800603a:	4870      	ldr	r0, [pc, #448]	; (80061fc <MX_GPIO_Init+0x284>)
 800603c:	f7fa ff5a 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8006040:	2201      	movs	r2, #1
 8006042:	2101      	movs	r1, #1
 8006044:	486e      	ldr	r0, [pc, #440]	; (8006200 <MX_GPIO_Init+0x288>)
 8006046:	f7fa ff55 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800604a:	2200      	movs	r2, #0
 800604c:	2104      	movs	r1, #4
 800604e:	486c      	ldr	r0, [pc, #432]	; (8006200 <MX_GPIO_Init+0x288>)
 8006050:	f7fa ff50 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8006054:	2200      	movs	r2, #0
 8006056:	f24f 0110 	movw	r1, #61456	; 0xf010
 800605a:	486a      	ldr	r0, [pc, #424]	; (8006204 <MX_GPIO_Init+0x28c>)
 800605c:	f7fa ff4a 	bl	8000ef4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8006060:	2304      	movs	r3, #4
 8006062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006064:	2300      	movs	r3, #0
 8006066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800606c:	f107 031c 	add.w	r3, r7, #28
 8006070:	4619      	mov	r1, r3
 8006072:	4862      	ldr	r0, [pc, #392]	; (80061fc <MX_GPIO_Init+0x284>)
 8006074:	f7fa fdbc 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8006078:	2308      	movs	r3, #8
 800607a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800607c:	2301      	movs	r3, #1
 800607e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006080:	2300      	movs	r3, #0
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006084:	2300      	movs	r3, #0
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8006088:	f107 031c 	add.w	r3, r7, #28
 800608c:	4619      	mov	r1, r3
 800608e:	485b      	ldr	r0, [pc, #364]	; (80061fc <MX_GPIO_Init+0x284>)
 8006090:	f7fa fdae 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8006094:	2330      	movs	r3, #48	; 0x30
 8006096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006098:	4b5b      	ldr	r3, [pc, #364]	; (8006208 <MX_GPIO_Init+0x290>)
 800609a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060a0:	f107 031c 	add.w	r3, r7, #28
 80060a4:	4619      	mov	r1, r3
 80060a6:	4855      	ldr	r0, [pc, #340]	; (80061fc <MX_GPIO_Init+0x284>)
 80060a8:	f7fa fda2 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC2 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_2;
 80060ac:	2305      	movs	r3, #5
 80060ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060b0:	2301      	movs	r3, #1
 80060b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060bc:	f107 031c 	add.w	r3, r7, #28
 80060c0:	4619      	mov	r1, r3
 80060c2:	484f      	ldr	r0, [pc, #316]	; (8006200 <MX_GPIO_Init+0x288>)
 80060c4:	f7fa fd94 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80060c8:	2302      	movs	r3, #2
 80060ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80060cc:	4b4f      	ldr	r3, [pc, #316]	; (800620c <MX_GPIO_Init+0x294>)
 80060ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80060d0:	2302      	movs	r3, #2
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060d4:	f107 031c 	add.w	r3, r7, #28
 80060d8:	4619      	mov	r1, r3
 80060da:	4849      	ldr	r0, [pc, #292]	; (8006200 <MX_GPIO_Init+0x288>)
 80060dc:	f7fa fd88 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80060e0:	2308      	movs	r3, #8
 80060e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e4:	2302      	movs	r3, #2
 80060e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060f0:	2305      	movs	r3, #5
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80060f4:	f107 031c 	add.w	r3, r7, #28
 80060f8:	4619      	mov	r1, r3
 80060fa:	4841      	ldr	r0, [pc, #260]	; (8006200 <MX_GPIO_Init+0x288>)
 80060fc:	f7fa fd78 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006100:	2301      	movs	r3, #1
 8006102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006104:	4b41      	ldr	r3, [pc, #260]	; (800620c <MX_GPIO_Init+0x294>)
 8006106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	2300      	movs	r3, #0
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800610c:	f107 031c 	add.w	r3, r7, #28
 8006110:	4619      	mov	r1, r3
 8006112:	483f      	ldr	r0, [pc, #252]	; (8006210 <MX_GPIO_Init+0x298>)
 8006114:	f7fa fd6c 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8006118:	2310      	movs	r3, #16
 800611a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611c:	2302      	movs	r3, #2
 800611e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	2300      	movs	r3, #0
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006124:	2300      	movs	r3, #0
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006128:	2306      	movs	r3, #6
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800612c:	f107 031c 	add.w	r3, r7, #28
 8006130:	4619      	mov	r1, r3
 8006132:	4837      	ldr	r0, [pc, #220]	; (8006210 <MX_GPIO_Init+0x298>)
 8006134:	f7fa fd5c 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8006138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800613c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613e:	2302      	movs	r3, #2
 8006140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006146:	2300      	movs	r3, #0
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800614a:	2305      	movs	r3, #5
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800614e:	f107 031c 	add.w	r3, r7, #28
 8006152:	4619      	mov	r1, r3
 8006154:	482f      	ldr	r0, [pc, #188]	; (8006214 <MX_GPIO_Init+0x29c>)
 8006156:	f7fa fd4b 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800615a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800615e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006160:	2301      	movs	r3, #1
 8006162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006168:	2300      	movs	r3, #0
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800616c:	f107 031c 	add.w	r3, r7, #28
 8006170:	4619      	mov	r1, r3
 8006172:	4824      	ldr	r0, [pc, #144]	; (8006204 <MX_GPIO_Init+0x28c>)
 8006174:	f7fa fd3c 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8006178:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800617c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617e:	2302      	movs	r3, #2
 8006180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006186:	2300      	movs	r3, #0
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800618a:	2306      	movs	r3, #6
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800618e:	f107 031c 	add.w	r3, r7, #28
 8006192:	4619      	mov	r1, r3
 8006194:	481a      	ldr	r0, [pc, #104]	; (8006200 <MX_GPIO_Init+0x288>)
 8006196:	f7fa fd2b 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800619a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800619e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061a0:	2300      	movs	r3, #0
 80061a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80061a8:	f107 031c 	add.w	r3, r7, #28
 80061ac:	4619      	mov	r1, r3
 80061ae:	4818      	ldr	r0, [pc, #96]	; (8006210 <MX_GPIO_Init+0x298>)
 80061b0:	f7fa fd1e 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80061b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80061b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ba:	2302      	movs	r3, #2
 80061bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061c2:	2303      	movs	r3, #3
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061c6:	230a      	movs	r3, #10
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ca:	f107 031c 	add.w	r3, r7, #28
 80061ce:	4619      	mov	r1, r3
 80061d0:	480f      	ldr	r0, [pc, #60]	; (8006210 <MX_GPIO_Init+0x298>)
 80061d2:	f7fa fd0d 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80061d6:	2320      	movs	r3, #32
 80061d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061da:	2300      	movs	r3, #0
 80061dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80061e2:	f107 031c 	add.w	r3, r7, #28
 80061e6:	4619      	mov	r1, r3
 80061e8:	4806      	ldr	r0, [pc, #24]	; (8006204 <MX_GPIO_Init+0x28c>)
 80061ea:	f7fa fd01 	bl	8000bf0 <HAL_GPIO_Init>

}
 80061ee:	bf00      	nop
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40021000 	.word	0x40021000
 8006200:	40020800 	.word	0x40020800
 8006204:	40020c00 	.word	0x40020c00
 8006208:	10120000 	.word	0x10120000
 800620c:	10110000 	.word	0x10110000
 8006210:	40020000 	.word	0x40020000
 8006214:	40020400 	.word	0x40020400

08006218 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
 8006220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006224:	4805      	ldr	r0, [pc, #20]	; (800623c <StartDefaultTask+0x24>)
 8006226:	f7fa fe7e 	bl	8000f26 <HAL_GPIO_TogglePin>
	ecrire("la led est verte\r\n");
 800622a:	4805      	ldr	r0, [pc, #20]	; (8006240 <StartDefaultTask+0x28>)
 800622c:	f000 f84a 	bl	80062c4 <ecrire>
    osDelay(1000);
 8006230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006234:	f7fc fe64 	bl	8002f00 <osDelay>
	HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
 8006238:	e7f2      	b.n	8006220 <StartDefaultTask+0x8>
 800623a:	bf00      	nop
 800623c:	40020c00 	.word	0x40020c00
 8006240:	08006440 	.word	0x08006440

08006244 <StartSecondTask>:
  }
  /* USER CODE END 5 */ 
}

void StartSecondTask(void *argument)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)										//on fait un for : la deuxième tâche est toujours démarrée juste bloquée, donc on utilise une boucle infinie pour que
  {												// il toggle puis il se bloque mais il reste dans la boucle etc etc
	xSemaphoreTake( xLEDSemaphore, portMAX_DELAY );
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <StartSecondTask+0x30>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fb97 	bl	8003988 <xQueueSemaphoreTake>
	HAL_GPIO_TogglePin(GPIOD,LD6_Pin);
 800625a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800625e:	4806      	ldr	r0, [pc, #24]	; (8006278 <StartSecondTask+0x34>)
 8006260:	f7fa fe61 	bl	8000f26 <HAL_GPIO_TogglePin>
	ecrire("la led est bleu\r\n");
 8006264:	4805      	ldr	r0, [pc, #20]	; (800627c <StartSecondTask+0x38>)
 8006266:	f000 f82d 	bl	80062c4 <ecrire>

    osDelay(1);
 800626a:	2001      	movs	r0, #1
 800626c:	f7fc fe48 	bl	8002f00 <osDelay>
	xSemaphoreTake( xLEDSemaphore, portMAX_DELAY );
 8006270:	e7ec      	b.n	800624c <StartSecondTask+0x8>
 8006272:	bf00      	nop
 8006274:	20001b9c 	.word	0x20001b9c
 8006278:	40020c00 	.word	0x40020c00
 800627c:	08006454 	.word	0x08006454

08006280 <StartThirdTask>:
  }
  /* USER CODE END 5 */
}

void StartThirdTask(void *argument)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b0c2      	sub	sp, #264	; 0x108
 8006284:	af00      	add	r7, sp, #0
 8006286:	1d3b      	adds	r3, r7, #4
 8006288:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t buffer[STACK_SIZE];
	for(;;)
	{
		xQueueReceive(xQueue1,buffer,portMAX_DELAY);
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <StartThirdTask+0x3c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f107 0108 	add.w	r1, r7, #8
 8006292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006296:	4618      	mov	r0, r3
 8006298:	f7fd fa9a 	bl	80037d0 <xQueueReceive>
		HAL_UART_Transmit(&huart1,buffer,strlen(buffer),1000);
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7f9 ff9d 	bl	80001e0 <strlen>
 80062a6:	4603      	mov	r3, r0
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f107 0108 	add.w	r1, r7, #8
 80062ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062b2:	4803      	ldr	r0, [pc, #12]	; (80062c0 <StartThirdTask+0x40>)
 80062b4:	f7fc fa24 	bl	8002700 <HAL_UART_Transmit>
		xQueueReceive(xQueue1,buffer,portMAX_DELAY);
 80062b8:	e7e7      	b.n	800628a <StartThirdTask+0xa>
 80062ba:	bf00      	nop
 80062bc:	20001b98 	.word	0x20001b98
 80062c0:	20001b00 	.word	0x20001b00

080062c4 <ecrire>:

  /* USER CODE END 5 */
}

void ecrire(char message[])
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b0c4      	sub	sp, #272	; 0x110
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	6018      	str	r0, [r3, #0]
	int i = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char buffer[STACK_SIZE];
	while(message[i]!='\0' && i<STACK_SIZE)
 80062d4:	e011      	b.n	80062fa <ecrire+0x36>
	{
		buffer[i]=message[i];
 80062d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062da:	1d3a      	adds	r2, r7, #4
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	7819      	ldrb	r1, [r3, #0]
 80062e2:	f107 020c 	add.w	r2, r7, #12
 80062e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ea:	4413      	add	r3, r2
 80062ec:	460a      	mov	r2, r1
 80062ee:	701a      	strb	r2, [r3, #0]
		i++;
 80062f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f4:	3301      	adds	r3, #1
 80062f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	while(message[i]!='\0' && i<STACK_SIZE)
 80062fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fe:	1d3a      	adds	r2, r7, #4
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <ecrire+0x4e>
 800630a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630e:	2bff      	cmp	r3, #255	; 0xff
 8006310:	dde1      	ble.n	80062d6 <ecrire+0x12>
	}
	buffer[i]='\0';
 8006312:	f107 020c 	add.w	r2, r7, #12
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	4413      	add	r3, r2
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
	xQueueSend(xQueue1,buffer,portMAX_DELAY);
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <ecrire+0x78>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	f107 010c 	add.w	r1, r7, #12
 8006328:	2300      	movs	r3, #0
 800632a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800632e:	f7fd f837 	bl	80033a0 <xQueueGenericSend>
}
 8006332:	bf00      	nop
 8006334:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20001b98 	.word	0x20001b98

08006340 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	BaseType_t lHigherPriorityTaskWoken = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xLEDSemaphore, &lHigherPriorityTaskWoken);   //on redonne le sémaphore pour la tâche 2 se débloque
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_GPIO_EXTI_Callback+0x28>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f107 020c 	add.w	r2, r7, #12
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f7fd f9af 	bl	80036bc <xQueueGiveFromISR>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20001b9c 	.word	0x20001b9c

0800636c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006370:	bf00      	nop
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f82c 	bl	80063ec <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006488 	.word	0x08006488
 80063b8:	08006488 	.word	0x08006488
 80063bc:	08006488 	.word	0x08006488
 80063c0:	0800648c 	.word	0x0800648c

080063c4 <memcpy>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	1e43      	subs	r3, r0, #1
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	bd10      	pop	{r4, pc}
 80063d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d8:	e7f7      	b.n	80063ca <memcpy+0x6>

080063da <memset>:
 80063da:	4402      	add	r2, r0
 80063dc:	4603      	mov	r3, r0
 80063de:	4293      	cmp	r3, r2
 80063e0:	d100      	bne.n	80063e4 <memset+0xa>
 80063e2:	4770      	bx	lr
 80063e4:	f803 1b01 	strb.w	r1, [r3], #1
 80063e8:	e7f9      	b.n	80063de <memset+0x4>
	...

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
